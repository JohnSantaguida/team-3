{"version":3,"sources":["app/app.module.js","app/services/user/user.service.js","app/services/profiles/profile.service.js","app/services/profiles/page-ribbon.directive.js","app/app.js","app/services/auth/sessions.service.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password-reset-init.service.js","app/services/auth/password-reset-finish.service.js","app/services/auth/password.service.js","app/services/auth/has-authority.directive.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.session.service.js","app/services/auth/auth.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/navbar/active-link.directive.js","app/layouts/error/error.state.js","app/home/home.state.js","app/home/home.controller.js","app/entities/team/team-dialog.controller.js","app/entities/team/team-detail.controller.js","app/entities/team/team-delete-dialog.controller.js","app/entities/team/team.state.js","app/entities/team/team.service.js","app/entities/team/team.controller.js","app/entities/staff/staff-dialog.controller.js","app/entities/staff/staff-detail.controller.js","app/entities/staff/staff-delete-dialog.controller.js","app/entities/staff/staff.state.js","app/entities/staff/staff.service.js","app/entities/staff/staff.controller.js","app/entities/referral-source/referral-source-dialog.controller.js","app/entities/referral-source/referral-source-detail.controller.js","app/entities/referral-source/referral-source-delete-dialog.controller.js","app/entities/referral-source/referral-source.state.js","app/entities/referral-source/referral-source.service.js","app/entities/referral-source/referral-source.controller.js","app/entities/queue/queue-patient-dialog.controller.js","app/entities/queue/queue-dialog.controller.js","app/entities/queue/queue-detail.controller.js","app/entities/queue/queue-delete-dialog.controller.js","app/entities/queue/queue.state.js","app/entities/queue/queue.service.js","app/entities/queue/queue.controller.js","app/entities/patient/patient-dialog.controller.js","app/entities/patient/patient-detail.controller.js","app/entities/patient/patient-delete-dialog.controller.js","app/entities/patient/patient.state.js","app/entities/patient/patient.service.js","app/entities/patient/patient.controller.js","app/entities/entity.state.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort-by.directive.js","app/components/util/sort.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert-error.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/handlers/state.handler.js","app/blocks/config/uib-pagination.config.js","app/blocks/config/uib-pager.config.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/alert.config.js","app/app.state.js","app/app.constants.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/metrics/metrics.state.js","app/admin/metrics/metrics.service.js","app/admin/metrics/metrics.modal.controller.js","app/admin/metrics/metrics.controller.js","app/admin/logs/logs.state.js","app/admin/logs/logs.service.js","app/admin/logs/logs.controller.js","app/admin/health/health.state.js","app/admin/health/health.service.js","app/admin/health/health.modal.controller.js","app/admin/health/health.controller.js","app/admin/entity-audit/entity-audit.state.js","app/admin/entity-audit/entity-audit.service.js","app/admin/entity-audit/entity-audit.detail.controller.js","app/admin/entity-audit/entity-audit.controller.js","app/admin/docs/docs.state.js","app/admin/configuration/configuration.state.js","app/admin/configuration/configuration.service.js","app/admin/configuration/configuration.controller.js","app/admin/audits/audits.state.js","app/admin/audits/audits.service.js","app/admin/audits/audits.controller.js","app/admin/admin.state.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/sessions/sessions.state.js","app/account/sessions/sessions.controller.js","app/account/reset/request/reset.request.state.js","app/account/reset/request/reset.request.controller.js","app/account/reset/finish/reset.finish.state.js","app/account/reset/finish/reset.finish.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password-strength-bar.directive.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/account/account.state.js"],"names":["run","stateHandler","initialize","angular","module","$inject","User","$resource","service","query","method","isArray","get","transformResponse","data","fromJson","save","update","delete","factory","ProfileService","$q","$http","getProfileInfo","isDefined","dataPromise","then","result","activeProfiles","response","ribbonEnv","inProduction","indexOf","swaggerDisabled","pageRibbon","$rootScope","linkFunc","scope","element","attrs","addClass","removeClass","directive","replace","restrict","template","link","Sessions","getAll","Register","Principal","Account","authenticate","identity","_identity","_authenticated","hasAnyAuthority","authorities","i","length","hasAuthority","authority","this","_id","when","force","getAccountThen","account","deferred","resolve","getAccountCatch","defer","undefined","promise","$promise","isAuthenticated","isIdentityResolved","PasswordResetInit","PasswordResetFinish","Password","setVisible","setHidden","defineVisibility","reset","$watch","split","AuthServerProvider","$localStorage","getToken","token","authenticationToken","hasValidToken","login","credentials","encodeURIComponent","username","password","rememberMe","post","headers","Content-Type","success","logout","Auth","$state","$sessionStorage","LoginService","Activate","activateAccount","key","callback","cb","noop","err","bind","authorize","authThen","toState","parent","name","go","fromState","getPreviousState","previousState","resetPreviousState","params","storePreviousState","toStateParams","open","authReturn","changePassword","newPassword","createAccount","loginThen","reject","resetPasswordFinish","keyAndPassword","resetPasswordInit","mail","updateAccount","previousStateName","previousStateParams","interceptor","NavbarController","collapseNavbar","toggleNavbar","vm","isNavbarCollapsed","controller","activeLink","clazz","path","href","substring","location","newPath","stateConfig","$stateProvider","state","url","pageTitle","views","content@","templateUrl","config","controllerAs","HomeController","$scope","getAccount","register","$on","TeamDialogController","$timeout","$stateParams","$uibModalInstance","entity","Team","team","focus","onSaveSuccess","$emit","close","isSaving","onSaveError","id","clear","dismiss","TeamDetailController","unsubscribe","event","TeamDeleteController","confirmDelete","onEnter","$uibModal","backdrop","size","organization","specialty","maxPatients","monday","tuesday","wednesday","thursday","friday","saturday","sunday","reload","resourceUrl","TeamController","teams","loadAll","StaffDialogController","Staff","staff","StaffDetailController","StaffDeleteController","role","StaffController","ReferralSourceDialogController","ReferralSource","referralSource","ReferralSourceDetailController","ReferralSourceDeleteController","contact","ReferralSourceController","referralSources","QueuePatientDialogController","Patient","Queue","queue","patient","referralsources","onNewPatientSaveSuccess","newqueue","status","timestampInitial","timestampFinal","console","log","datePickerOpenStatus","deadline","openCalendar","date","QueueDialogController","patients","QueueDetailController","QueueDeleteController","medicalReferralId","age","conditionDesciption","priority","DateUtils","convertDateTimeFromServer","QueueController","ChatService","get_max_for_today","one_team","weekdays","d","Date","n","getDay","queues","arrayTeam","arrayPatientTeam","arrayPotentialDischargedPatient","push","space","progressbarid","j","tmp","initialDate","getTime","finalDate","addMessage","message","send","receive","activateProgressBar","updateTeam","queueID","teamID","queueResult","teamResult","onSaveFinished","updateStatus","activateJQueryUI","activatejQueryUI","barID","progressNum","progressText","intialProgressbar","recoverFromPotentialDischarge","removeFromPotentialDischarge","$","modal","PatientDialogController","PatientDetailController","EntityAuditService","loadPatientHistory","findByEntity","audits","map","it","entityValue","JSON","parse","array_records","patient_id","teamId","teamName","lastModifiedDate","lastModifiedBy","action","potentialDischarged","patientHistories","PatientDeleteController","PatientController","abstract","words","wordsFilter","input","isNaN","inputWords","slice","join","filter","characters","charactersFilter","chars","breakOnWord","charAt","substr","lastspace","lastIndexOf","jhSortBy","parentCtrl","sort","require","jhSort","predicate","ascending","SortController","bindToController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","$apply","triggerApply","values","$watchGroup","ParseLinks","header","Error","parts","links","forEach","p","section","trim","queryString","RegExp","$0","$1","$2","$3","page","isString","parseInt","PaginationUtil","parseAscending","sortArray","parsePage","parsePredicate","pop","jhiItemCount","bindings","queryCount","component","$filter","convertLocalDateFromServer","dateString","convertLocalDateToServer","dateformat","DataUtils","$window","abbreviate","text","byteSize","base64String","endsWith","suffix","str","paddingSize","formatAsBytes","toString","openFile","type","toBase64","file","fileReader","FileReader","readAsDataURL","onload","e","base64Data","target","capitalize","capitalizeFilter","toLowerCase","toUpperCase","Base64","encode","chr1","chr2","enc1","enc2","enc3","output","chr3","enc4","charCodeAt","keyStr","decode","String","fromCharCode","modalInstance","animation","resetModal","LoginController","cancel","authenticationError","preventDefault","current","$broadcast","requestResetPassword","showValidation","each","$formGroup","$inputs","$input","hasClass","isInvalid","toggleClass","constant","itemsPerPage","minbytes","ngModel","$validators","modelValue","$isEmpty","numberOfBytes","maxbytes","jhiAlertErrorController","AlertService","addErrorAlert","alerts","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","stopPropagation","errorHeader","entityKey","entityName","fieldErrors","fieldError","convertedField","fieldName","toJson","jhiAlertError","getService","$sce","position","error","warning","info","alertOptions","alert","trustAsHtml","alertId","closeAlert","addAlert","extAlerts","that","thisAlerts","closeAlertByIndex","index","splice","$get","showAsToast","provider","jhiAlertController","jhiAlert","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","authExpiredInterceptor","$injector","$document","to","getCSRF","afterCSRFRenewed","doc","ca","cookie","c","oldResponse","VERSION","stateChangeStart","external","stateChangeSuccess","toParams","fromParams","titleKey","document","title","paginationConfig","uibPaginationConfig","paginationConstants","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","localStorageConfig","$localStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","defaults","xsrfCookieName","xsrfHeaderName","setMatchlist","otherwise","interceptors","val","equals","a","b","is","pattern","compileServiceConfig","$compileProvider","DEBUG_INFO_ENABLED","debugInfoEnabled","alertServiceConfig","AlertServiceProvider","navbar@","UserManagementDialogController","user","langKey","languages","UserManagementDetailController","load","UserManagementDeleteController","firstName","lastName","email","activated","createdBy","createdDate","resetDate","resetKey","UserManagementController","totalItems","users","loadPage","setActive","isActivated","editForm","$setPristine","$setUntouched","currentAccount","JhiMetricsService","getMetrics","threadDump","JhiMetricsMonitoringModalController","getLabelClass","threadState","threadDumpAll","threadDumpBlocked","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","value","JhiMetricsMonitoringController","refresh","updatingMetrics","metrics","refreshThreadDumpData","cachesStats","servicesStats","newValue","timers","newKey","LogsService","findAll","changeLevel","LogsController","level","loggers","JhiHealthService","checkHealth","HealthModalController","currentHealth","baseName","subSystemName","JhiHealthCheckController","addHealthObject","isLeaf","healthObject","healthData","details","hasDetails","isHealthObject","extend","flattenHealthData","hasSubSystem","getModuleName","statusState","separator","updatingHealth","transformHealthData","showHealth","health","remainder","findAllAudited","entityType","limit","getPrevVersion","qualifiedName","entityId","commitVersion","AuditDetailModalCtrl","ObjectDiff","diff","audit","diffValue","toJsonView","diffValueChanges","toJsonDiffView","EntityAuditController","entities","loadChanges","loading","getEntityName","splits","format","objToJsonView","isObject","isDate","openChange","previousVersion","currentVersion","diffOwnProperties","limits","JhiConfigurationService","getConfigPropsComplete","properties","orderBy","getEnv","getEnvComplete","vals","v","k","JhiConfigurationController","allConfiguration","configuration","AuditsService","fromDate","toDate","AuditsController","onChangeDate","dateFormat","today","getFullYear","getMonth","getDate","previousMonth","SettingsController","settingsAccount","copyAccount","SessionsController","invalidate","series","sessions","RequestResetController","requestReset","errorEmailNotExists","resetAccount","ResetFinishController","finishReset","confirmPassword","doNotMatch","keyMissing","isUndefined","RegisterController","registerAccount","errorUserExists","errorEmailExists","passwordStrengthBar","iElement","strength","colors","mesureStrength","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","grep","el","Math","min","getColor","s","idx","col","children","css","background-color","passwordToCheck","PasswordController","ActivationController","$templateCache","put"],"mappings":"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","file":"app/app-2de24ae020.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp', [\n            'ngStorage', \n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            'ds.objectDiff',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$q', '$http'];\n\n    function ProfileService($q, $http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (!angular.isDefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerDisabled = result.data.activeProfiles.indexOf(\"no-swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('pageRibbon', pageRibbon);\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" >{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp', [\n            'ngStorage', \n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            'ds.objectDiff',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$q', '$http'];\n\n    function ProfileService($q, $http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (!angular.isDefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerDisabled = result.data.activeProfiles.indexOf(\"no-swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('pageRibbon', pageRibbon);\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" >{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('hasAuthority', hasAuthority);\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' ];\n\n    function AuthServerProvider ($http, $localStorage ) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n\n            \n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n            \n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerDisabled = response.swaggerDisabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('activeLink', activeLink);\n\n    function activeLink() {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var clazz = attrs.activeLink;\n            var path = attrs.href;\n            path = path.substring(1); //hack because path does bot return including hashbang\n            scope.location = location;\n            scope.$watch('location.path()', function(newPath) {\n                if (path === newPath) {\n                    element.addClass(clazz);\n                } else {\n                    element.removeClass(clazz);\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                // 'content@': {\n                //     templateUrl: 'app/home/home.html',\n                //     controller: 'HomeController',\n                //     controllerAs: 'vm'\n                // }\n                'content@': {\n                    templateUrl: 'app/entities/queue/queues.html',\n                    controller: 'QueueController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('TeamDialogController', TeamDialogController);\n\n    TeamDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Team'];\n\n    function TeamDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Team) {\n        var vm = this;\n        vm.team = entity;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:teamUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.team.id !== null) {\n                Team.update(vm.team, onSaveSuccess, onSaveError);\n            } else {\n                Team.save(vm.team, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('TeamDetailController', TeamDetailController);\n\n    TeamDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Team'];\n\n    function TeamDetailController($scope, $rootScope, $stateParams, entity, Team) {\n        var vm = this;\n        vm.team = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:teamUpdate', function(event, result) {\n            vm.team = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('TeamDeleteController',TeamDeleteController);\n\n    TeamDeleteController.$inject = ['$uibModalInstance', 'entity', 'Team'];\n\n    function TeamDeleteController($uibModalInstance, entity, Team) {\n        var vm = this;\n        vm.team = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Team.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('team', {\n            parent: 'entity',\n            url: '/team',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Teams'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/team/teams.html',\n                    controller: 'TeamController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('team-detail', {\n            parent: 'entity',\n            url: '/team/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Team'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/team/team-detail.html',\n                    controller: 'TeamDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Team', function($stateParams, Team) {\n                    return Team.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('team.new', {\n            parent: 'team',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/team/team-dialog.html',\n                    controller: 'TeamDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                organization: null,\n                                name: null,\n                                specialty: null,\n                                maxPatients: null,\n                                monday: null,\n                                tuesday: null,\n                                wednesday: null,\n                                thursday: null,\n                                friday: null,\n                                saturday: null,\n                                sunday: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('team', null, { reload: true });\n                }, function() {\n                    $state.go('team');\n                });\n            }]\n        })\n        .state('team.edit', {\n            parent: 'team',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/team/team-dialog.html',\n                    controller: 'TeamDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Team', function(Team) {\n                            return Team.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('team', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('team.delete', {\n            parent: 'team',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/team/team-delete-dialog.html',\n                    controller: 'TeamDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Team', function(Team) {\n                            return Team.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('team', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('Team', Team);\n\n    Team.$inject = ['$resource'];\n\n    function Team ($resource) {\n        var resourceUrl =  'api/teams/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('TeamController', TeamController);\n\n    TeamController.$inject = ['$scope', '$state', 'Team'];\n\n    function TeamController ($scope, $state, Team) {\n        var vm = this;\n        vm.teams = [];\n        vm.loadAll = function() {\n            Team.query(function(result) {\n                vm.teams = result;\n            });\n        };\n\n        vm.loadAll();\n        \n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('StaffDialogController', StaffDialogController);\n\n    StaffDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Staff', 'Team'];\n\n    function StaffDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Staff, Team) {\n        var vm = this;\n        vm.staff = entity;\n        vm.teams = Team.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:staffUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.staff.id !== null) {\n                Staff.update(vm.staff, onSaveSuccess, onSaveError);\n            } else {\n                Staff.save(vm.staff, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('StaffDetailController', StaffDetailController);\n\n    StaffDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Staff', 'Team'];\n\n    function StaffDetailController($scope, $rootScope, $stateParams, entity, Staff, Team) {\n        var vm = this;\n        vm.staff = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:staffUpdate', function(event, result) {\n            vm.staff = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('StaffDeleteController',StaffDeleteController);\n\n    StaffDeleteController.$inject = ['$uibModalInstance', 'entity', 'Staff'];\n\n    function StaffDeleteController($uibModalInstance, entity, Staff) {\n        var vm = this;\n        vm.staff = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Staff.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('staff', {\n            parent: 'entity',\n            url: '/staff',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Staff'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/staff/staff.html',\n                    controller: 'StaffController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('staff-detail', {\n            parent: 'entity',\n            url: '/staff/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Staff'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/staff/staff-detail.html',\n                    controller: 'StaffDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Staff', function($stateParams, Staff) {\n                    return Staff.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('staff.new', {\n            parent: 'staff',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\n                    controller: 'StaffDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                role: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('staff', null, { reload: true });\n                }, function() {\n                    $state.go('staff');\n                });\n            }]\n        })\n        .state('staff.edit', {\n            parent: 'staff',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\n                    controller: 'StaffDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Staff', function(Staff) {\n                            return Staff.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('staff', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('staff.delete', {\n            parent: 'staff',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/staff/staff-delete-dialog.html',\n                    controller: 'StaffDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Staff', function(Staff) {\n                            return Staff.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('staff', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('Staff', Staff);\n\n    Staff.$inject = ['$resource'];\n\n    function Staff ($resource) {\n        var resourceUrl =  'api/staff/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('StaffController', StaffController);\n\n    StaffController.$inject = ['$scope', '$state', 'Staff'];\n\n    function StaffController ($scope, $state, Staff) {\n        var vm = this;\n        vm.staff = [];\n        vm.loadAll = function() {\n            Staff.query(function(result) {\n                vm.staff = result;\n            });\n        };\n\n        vm.loadAll();\n        \n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ReferralSourceDialogController', ReferralSourceDialogController);\n\n    ReferralSourceDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'ReferralSource'];\n\n    function ReferralSourceDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, ReferralSource) {\n        var vm = this;\n        vm.referralSource = entity;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:referralSourceUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.referralSource.id !== null) {\n                ReferralSource.update(vm.referralSource, onSaveSuccess, onSaveError);\n            } else {\n                ReferralSource.save(vm.referralSource, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ReferralSourceDetailController', ReferralSourceDetailController);\n\n    ReferralSourceDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'ReferralSource'];\n\n    function ReferralSourceDetailController($scope, $rootScope, $stateParams, entity, ReferralSource) {\n        var vm = this;\n        vm.referralSource = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:referralSourceUpdate', function(event, result) {\n            vm.referralSource = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ReferralSourceDeleteController',ReferralSourceDeleteController);\n\n    ReferralSourceDeleteController.$inject = ['$uibModalInstance', 'entity', 'ReferralSource'];\n\n    function ReferralSourceDeleteController($uibModalInstance, entity, ReferralSource) {\n        var vm = this;\n        vm.referralSource = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            ReferralSource.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('referral-source', {\n            parent: 'entity',\n            url: '/referral-source',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'ReferralSources'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/referral-source/referral-sources.html',\n                    controller: 'ReferralSourceController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('referral-source-detail', {\n            parent: 'entity',\n            url: '/referral-source/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'ReferralSource'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/referral-source/referral-source-detail.html',\n                    controller: 'ReferralSourceDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'ReferralSource', function($stateParams, ReferralSource) {\n                    return ReferralSource.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('referral-source.new', {\n            parent: 'referral-source',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/referral-source/referral-source-dialog.html',\n                    controller: 'ReferralSourceDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                contact: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('referral-source', null, { reload: true });\n                }, function() {\n                    $state.go('referral-source');\n                });\n            }]\n        })\n        .state('referral-source.edit', {\n            parent: 'referral-source',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/referral-source/referral-source-dialog.html',\n                    controller: 'ReferralSourceDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['ReferralSource', function(ReferralSource) {\n                            return ReferralSource.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('referral-source', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('referral-source.delete', {\n            parent: 'referral-source',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/referral-source/referral-source-delete-dialog.html',\n                    controller: 'ReferralSourceDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['ReferralSource', function(ReferralSource) {\n                            return ReferralSource.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('referral-source', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('ReferralSource', ReferralSource);\n\n    ReferralSource.$inject = ['$resource'];\n\n    function ReferralSource ($resource) {\n        var resourceUrl =  'api/referral-sources/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ReferralSourceController', ReferralSourceController);\n\n    ReferralSourceController.$inject = ['$scope', '$state', 'ReferralSource'];\n\n    function ReferralSourceController ($scope, $state, ReferralSource) {\n        var vm = this;\n        vm.referralSources = [];\n        vm.loadAll = function() {\n            ReferralSource.query(function(result) {\n                vm.referralSources = result;\n            });\n        };\n\n        vm.loadAll();\n        \n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueuePatientDialogController', QueuePatientDialogController);\n\n    QueuePatientDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Patient', 'ReferralSource','Team','Queue'];\n\n    function QueuePatientDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Patient, ReferralSource,Team,Queue) {\n        var vm = this;\n        vm.teams = Team.query();\n        vm.queue = entity;\n        vm.patient = entity;\n        vm.referralsources = ReferralSource.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:patientUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        var onNewPatientSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:patientUpdate', result);\n\n            if (vm.patient.team !== null) {\n            \t\tvar newqueue = {};\n                \tnewqueue.team = vm.patient.team;\n                \tnewqueue.patient = result;\n                \tnewqueue.status=null;\n                \tnewqueue.timestampInitial=null;\n                \tnewqueue.timestampFinal=null;\n                \tnewqueue.id=null;\n                \tconsole.log(newqueue);\n                \tQueue.save(newqueue, onSaveSuccess, onSaveError);\n             }\n\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.patient.id !== null) {\n                Patient.update(vm.patient, onNewPatientSaveSuccess, onSaveError);\n            } else {\n            \t\tPatient.save(vm.patient, onNewPatientSaveSuccess, onSaveError);\t             \t\t\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.deadline = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueueDialogController', QueueDialogController);\n\n    QueueDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Queue', 'Patient', 'Team'];\n\n    function QueueDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Queue, Patient, Team) {\n        var vm = this;\n        vm.queue = entity;\n        vm.patients = Patient.query();\n        vm.teams = Team.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:queueUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.queue.id !== null) {\n                Queue.update(vm.queue, onSaveSuccess, onSaveError);\n            } else {\n                Queue.save(vm.queue, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.timestampInitial = false;\n        vm.datePickerOpenStatus.timestampFinal = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueueDetailController', QueueDetailController);\n\n    QueueDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Queue', 'Patient', 'Team'];\n\n    function QueueDetailController($scope, $rootScope, $stateParams, entity, Queue, Patient, Team) {\n        var vm = this;\n        vm.queue = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:queueUpdate', function(event, result) {\n            vm.queue = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueueDeleteController',QueueDeleteController);\n\n    QueueDeleteController.$inject = ['$uibModalInstance', 'entity', 'Queue'];\n\n    function QueueDeleteController($uibModalInstance, entity, Queue) {\n        var vm = this;\n        vm.queue = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Queue.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('queue', {\n            parent: 'entity',\n            url: '/queue',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Queues'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/queue/queues.html',\n                    controller: 'QueueController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('queue-detail', {\n            parent: 'entity',\n            url: '/queue/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Queue'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/queue/queue-detail.html',\n                    controller: 'QueueDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Queue', function($stateParams, Queue) {\n                    return Queue.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('queue.new', {\n            parent: 'queue',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/queue/queue-dialog.html',\n                    controller: 'QueueDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                status: null,\n                                timestampInitial: null,\n                                timestampFinal: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('queue', null, { reload: true });\n                }, function() {\n                    $state.go('queue');\n                });\n            }]\n        })\n        .state('queue.edit', {\n            parent: 'queue',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/queue/queue-dialog.html',\n                    controller: 'QueueDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Queue', function(Queue) {\n                            return Queue.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('queue', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('queue.delete', {\n            parent: 'queue',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/queue/queue-delete-dialog.html',\n                    controller: 'QueueDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Queue', function(Queue) {\n                            return Queue.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('queue', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('queue.newpatient', {\n            parent: 'queue',\n            url: '/newpatient',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/queue/queue-patient-dialog.html',\n                    controller: 'QueuePatientDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                medicalReferralId: null,\n                                age: null,\n                                conditionDesciption: null,\n                                priority: null,\n                                deadline: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    // $state.go('queue', null, { reload: true });\n                    $state.go('queue', null, { reload: true });\n                }, function() {\n                    $state.go('queue');\n                });\n            }]\n        })\n        ;\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('Queue', Queue);\n\n    Queue.$inject = ['$resource', 'DateUtils'];\n\n    function Queue ($resource, DateUtils) {\n        var resourceUrl =  'api/queues/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.timestampInitial = DateUtils.convertDateTimeFromServer(data.timestampInitial);\n                    data.timestampFinal = DateUtils.convertDateTimeFromServer(data.timestampFinal);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueueController', QueueController);\n\n    QueueController.$inject = ['$scope', '$state', 'Queue', 'ChatService', 'Team'];\n\n    function QueueController ($scope, $state, Queue, ChatService, Team) {\n        var vm = this;\n        $scope.queues = [];\n\n        function get_max_for_today(one_team) {\n            var weekdays = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];\n            var d = new Date();\n            var n = d.getDay();\n            if (one_team[weekdays[n]])\n                return one_team[weekdays[n]]\n            else\n                return one_team['maxPatients']\n        }\n\n        $scope.loadAll = function() {\n\n            var arrayTeam = [];\n            var arrayPatientTeam = [];\n            var arrayPotentialDischargedPatient = [];\n            Team.query(function(result) {\n                for (var i in result) {                    \n                    if(typeof result[i] ===\"object\")\n                        if ('name' in result[i]) {\n                            arrayTeam.push({'id':result[i]['id'], 'name': result[i]['name'], 'space': get_max_for_today(result[i]), 'progressbarid':'progressbar-'+result[i]['id'] });\n                            // arrayTeam.push({'id':result[i]['id'], 'name': result[i]['name'], 'space': result[i]['maxPatients'], 'progressbarid':'progressbar-'+result[i]['id'] });\n                            arrayPatientTeam.push([]);\n                            // console.log(result[i]['name']);\n                            // console.log(get_max_for_today(result[i]));\n                        }\n                }  \n                \n                Queue.query(function(result) {\n                    for (var i in result) {\n                        if(typeof result[i] ===\"object\")\n                            if ('team' in result[i]) \n                                if ('name' in result[i]['team']) {\n                                    for (var j in arrayTeam) {\n                                        if (arrayTeam[j]['name'] ==result[i]['team']['name']) {\n                                            var tmp = result[i];\n                                            // console.log(tmp);\n                                            // // check if name equals empty\n                                            // if(tmp['patient'] && tmp['patient']['name']=='') {\n                                            //     tmp['patient']['name']=' ';\n                                            // }\n                                            if (result[i]['timestampInitial']) {\n                                                var initialDate = result[i]['timestampInitial'];\n                                                tmp['timestampSince'] = new Date(initialDate).getTime();\n                                            }\n                                            if (result[i]['timestampFinal']) {\n                                                var finalDate = result[i]['timestampFinal'];\n                                                tmp['timestampDue'] = new Date(finalDate).getTime();\n                                            } else {\n                                                tmp['timestampDue'] = -1;\n                                            }\n                                            if (result[i]['status'] && result[i]['status']==\"potentialdischarge\") {\n                                                tmp['status'] = 1;\n                                                arrayPotentialDischargedPatient.push(tmp);\n                                            } else {\n                                                tmp['status'] = 0;\n                                            }\n                                            \n                                            arrayPatientTeam[j].push(tmp);\n                                        }\n                                    }\n                                }\n                    }\n                    for (var i in arrayTeam) {\n                        // console.log(arrayTeam[i]['space']);\n                        if (arrayTeam[i]['space']==null) {\n                            arrayTeam[i]['occupation'] = 0;\n                            arrayTeam[i]['progressbarText'] = arrayPatientTeam[i].length +\"\";\n                        } else if (arrayTeam[i]['space']<0) {\n                            arrayTeam[i]['occupation'] = 0;\n                            arrayTeam[i]['progressbarText'] = arrayPatientTeam[i].length +\"\";\n                        } else if (arrayTeam[i]['space']==0) {\n                            arrayTeam[i]['occupation'] = 0;\n                            arrayTeam[i]['progressbarText'] = arrayPatientTeam[i].length +\"/0\";\n                        } else {\n                            arrayTeam[i]['occupation'] = arrayPatientTeam[i].length/arrayTeam[i]['space'];\n                            arrayTeam[i]['progressbarText'] = arrayPatientTeam[i].length +\"/\"+arrayTeam[i]['space'];\n                        }\n                    }\n                    $scope.teams = arrayTeam;\n                    $scope.arrayPatientTeam = arrayPatientTeam;\n                    $scope.arrayPotentialDischargedPatient = arrayPotentialDischargedPatient;\n                    \n                });\n            });\n        };\n\n        $scope.loadAll();\n\n        $scope.addMessage = function(message) {\n            ChatService.send(\"send test message\");\n        };\n\n        ChatService.receive().then(null, null, function(message) {\n            // console.log(\"receive test message\");\n            // refresh_queue_page(false);\n            $scope.loadAll(function(result) {\n                $scope.activateProgressBar();\n            });\n        });\n\n        $scope.updateTeam = function(queueID, teamID) {\n            console.log(\"queueID, teamID:\"+ queueID+\"|\"+ teamID);\n            Queue.get({id: queueID}, function(queueResult) {\n                \n                Team.get({id : teamID}, function(teamResult) {\n                    // console.log(teamResult);\n                    queueResult.team=teamResult;\n                    queueResult.timestampInitial = new Date();\n                    // console.log(queueResult);\n                    Queue.update(queueResult, onSaveFinished);\n                });\n            });\n        }\n        $scope.updateStatus = function(queueID, status) {\n            Queue.get({id: queueID}, function(queueResult) {\n                queueResult.status=status;\n                Queue.update(queueResult, onSaveFinished);\n            });\n        }\n\n        var onSaveFinished = function () {\n            $scope.addMessage();\n        };\n\n        $scope.activateJQueryUI = function() {\n            activatejQueryUI();\n        }\n        $scope.activateProgressBar = function(barID, progressNum, progressText) {\n            intialProgressbar('#'+barID, progressNum, progressText);\n        }\n\n        $scope.recoverFromPotentialDischarge = function(queueID) {\n            Queue.get({id: queueID}, function(queueResult) {\n                queueResult.status='';\n                Queue.update(queueResult, onSaveFinished);\n            });\n        }\n        $scope.removeFromPotentialDischarge = function(queueID) {\n            console.log(queueID);\n            Queue.delete({id: queueID},\n                function () {\n                    $scope.addMessage();\n                });\n\n            // Queue.get({\n            //     id: queueID\n            // }, function(result) {\n            //     console.log(result);\n            //     $scope.queue = result;\n            //     $('#deleteQueueConfirmation').modal('show');\n            // });\n        };\n        $scope.delete = function(id) {\n            Queue.get({\n                id: id\n            }, function(result) {\n                $scope.queue = result;\n                $('#deleteQueueConfirmation').modal('show');\n            });\n        };\n        \n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PatientDialogController', PatientDialogController);\n\n    PatientDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Patient', 'ReferralSource'];\n\n    function PatientDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Patient, ReferralSource) {\n        var vm = this;\n        vm.patient = entity;\n        vm.referralsources = ReferralSource.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:patientUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.patient.id !== null) {\n                Patient.update(vm.patient, onSaveSuccess, onSaveError);\n            } else {\n                Patient.save(vm.patient, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.deadline = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PatientDetailController', PatientDetailController);\n\n    PatientDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Patient', 'ReferralSource', 'EntityAuditService'];\n\n    function PatientDetailController($scope, $rootScope, $stateParams, entity, Patient, ReferralSource, EntityAuditService) {\n        var vm = this;\n        vm.patient = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:patientUpdate', function(event, result) {\n            vm.patient = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n        $scope.loadPatientHistory = function() {\n            EntityAuditService.findByEntity(\"com.fangzhou.manatee.domain.Queue\", 9999).then(function (data) {\n                var audits = data.map(function(it){\n                    it.entityValue = JSON.parse(it.entityValue);\n                    return it;\n                });\n\n                var array_records = [];\n                for (var i in audits) {                \n                    if(typeof audits[i] ===\"object\")\n                        if ('id' in audits[i]) {\n                            var entityValue = audits[i]['entityValue'];\n                            if ('patient' in entityValue) {\n                                if(typeof entityValue['patient'] ===\"object\") {\n                                    var patient = entityValue['patient'];\n                                    var patient_id = patient[\n                                    'id']\n                                    if (patient_id==entity['id']) {\n                                        if('team' in entityValue) {\n                                            var team = entityValue['team'];\n                                            array_records.push({'teamId': team['id'], 'teamName': team['name'], 'lastModifiedDate': entityValue['lastModifiedDate'], 'lastModifiedBy': entityValue['lastModifiedBy'], 'action': audits[i]['action'], 'potentialDischarged': entityValue['status']});\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                }  \n                // console.log(\"vm.audits\");\n                // console.log(array_records);\n                // console.log(entity);\n                $scope.patientHistories = array_records;\n            }, function(){\n                // vm.loading = false;\n            });\n        }\n        $scope.loadPatientHistory();\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PatientDeleteController',PatientDeleteController);\n\n    PatientDeleteController.$inject = ['$uibModalInstance', 'entity', 'Patient'];\n\n    function PatientDeleteController($uibModalInstance, entity, Patient) {\n        var vm = this;\n        vm.patient = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Patient.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('patient', {\n            parent: 'entity',\n            url: '/patient',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Patients'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/patient/patients.html',\n                    controller: 'PatientController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('patient-detail', {\n            parent: 'entity',\n            url: '/patient/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Patient'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/patient/patient-detail.html',\n                    controller: 'PatientDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Patient', function($stateParams, Patient) {\n                    return Patient.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('patient.new', {\n            parent: 'patient',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/patient/patient-dialog.html',\n                    controller: 'PatientDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                medicalReferralId: null,\n                                age: null,\n                                conditionDesciption: null,\n                                priority: null,\n                                deadline: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('patient', null, { reload: true });\n                }, function() {\n                    $state.go('patient');\n                });\n            }]\n        })\n        .state('patient.edit', {\n            parent: 'patient',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/patient/patient-dialog.html',\n                    controller: 'PatientDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Patient', function(Patient) {\n                            return Patient.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('patient', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('patient.delete', {\n            parent: 'patient',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/patient/patient-delete-dialog.html',\n                    controller: 'PatientDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Patient', function(Patient) {\n                            return Patient.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('patient', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('Patient', Patient);\n\n    Patient.$inject = ['$resource', 'DateUtils'];\n\n    function Patient ($resource, DateUtils) {\n        var resourceUrl =  'api/patients/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.deadline = DateUtils.convertDateTimeFromServer(data.deadline);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PatientController', PatientController);\n\n    PatientController.$inject = ['$scope', '$state', 'Patient'];\n\n    function PatientController ($scope, $state, Patient) {\n        var vm = this;\n        vm.patients = [];\n        vm.loadAll = function() {\n            Patient.query(function(result) {\n                vm.patients = result;\n            });\n        };\n\n        vm.loadAll();\n        \n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            \n            return input;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .filter('characters', characters);\n        \n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n;\n(function(){\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse (header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function (p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if( angular.isString(page) ) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n\n            return links;\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page-1) * 20)==0 ? 1:(($ctrl.page-1) * 20)}} - ' +\n                    '{{($ctrl.page * 20) < $ctrl.queryCount ? ($ctrl.page * 20) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total'\n        }\n    };\n\n    angular\n        .module('manateeApp')\n        .component('jhiItemCount', jhiItemCount);\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n            }\n            return input.substring(0, 1).toUpperCase() + input.substring(1);\n        }\n    }\n})();\n;\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is succesful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        scope.$watch(function() {\n                            return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n    \n    angular\n        .module('manateeApp')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('manateeApp.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var errorHeader = httpResponse.headers('X-manateeApp-error');\n                var entityKey = httpResponse.headers('X-manateeApp-params');\n                if (errorHeader) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('manateeApp')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var alertKey = response.headers('X-manateeApp-alert');\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers('X-manateeApp-params')});\n            }\n            return response;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('manateeApp.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    \n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$document'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $document) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            } else if (response.status === 403 && response.config.method !== 'GET' && getCSRF() === '') {\n                // If the CSRF token expired, then try to get a new CSRF token and retry the old request\n                var $http = $injector.get('$http');\n                return $http.get('/').finally(function() { return afterCSRFRenewed(response); });\n            }\n            return $q.reject(response);\n        }\n\n        function getCSRF() {\n            var doc = $document[0];\n            if (doc) {\n                var name = 'CSRF-TOKEN=';\n                var ca = doc.cookie.split(';');\n                for (var i = 0; i < ca.length; i++) {\n                    var c = ca[i];\n                    while (c.charAt(0) === ' ') {c = c.substring(1);}\n\n                    if (c.indexOf(name) !== -1) {\n                        return c.substring(name.length, c.length);\n                    }\n                }\n            }\n            return '';\n        }\n\n        function afterCSRFRenewed(oldResponse) {\n            if (getCSRF() !== '') {\n                // retry the old request after the new CSRF-TOKEN is obtained\n                var $http = $injector.get('$http');\n                return $http(oldResponse.config);\n            } else {\n                // unlikely get here but reject with the old response any way and avoid infinite loop\n                return $q.reject(oldResponse);\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                \n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'manatee' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider'];\n\n    function localStorageConfig($localStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        \n        //enable CSRF\n        $httpProvider.defaults.xsrfCookieName = 'CSRF-TOKEN';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRF-TOKEN';\n        \n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n        \n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n;\n(function () {\n    \"use strict\";\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular.module(\"manateeApp\")\n\n.constant(\"VERSION\", \"0.0.1-SNAPSHOT\")\n\n.constant(\"DEBUG_INFO_ENABLED\", false)\n\n;\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'manatee'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'manatee'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.links = null;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.page = 1;\n        vm.setActive = setActive;\n        vm.totalItems = null;\n        vm.users = [];\n\n\n        vm.loadAll();\n\n        \n\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n\n        function loadAll () {\n            User.query({page: vm.page - 1, size: paginationConstants.itemsPerPage}, function (result, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n\n                //hide anonymous user from user management: it's a required user for Spring Security\n                for(var i in result) {\n                    if(result[i]['login'] === 'anonymoususer') {\n                        result.splice(i,1);\n                    }\n                }\n                vm.users = result;\n            });\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.loadAll();\n        }\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n            vm.editForm.$setPristine();\n            vm.editForm.$setUntouched();\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/jhipster/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            vm.cachesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    index = newKey.lastIndexOf('.');\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(index + 1),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Logs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/jhipster/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var service = {\n            checkHealth: checkHealth\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular.module('manateeApp')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.addHealthObject = addHealthObject;\n        vm.baseName = baseName;\n        vm.flattenHealthData = flattenHealthData;\n        vm.getLabelClass = getLabelClass;\n        vm.getModuleName = getModuleName;\n        vm.hasSubSystem = hasSubSystem;\n        vm.isHealthObject = isHealthObject;\n        vm.refresh = refresh;\n        vm.updatingHealth = true;\n        vm.separator = '.';\n        vm.showHealth = showHealth;\n        vm.subSystemName = subSystemName;\n        vm.transformHealthData = transformHealthData;\n\n        vm.refresh();\n\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!vm.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function baseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (vm.isHealthObject(value)) {\n                    if (vm.hasSubSystem(value)) {\n                        vm.addHealthObject(result, false, value, vm.getModuleName(path, key));\n                        vm.flattenHealthData(result, vm.getModuleName(path, key), value);\n                    } else {\n                        vm.addHealthObject(result, true, value, vm.getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + vm.separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = vm.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  vm.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n        function subSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            vm.flattenHealthData(response, null, data);\n            return response;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity-audit', {\n            parent: 'admin',\n            url: '/entity-audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/entity-audit/entity-audits.html',\n                    controller: 'EntityAuditController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('EntityAuditService', EntityAuditService);\n\n    EntityAuditService.$inject = ['$http'];\n\n    function EntityAuditService ($http) {\n\n        var service = {\n            findAllAudited: findAllAudited,\n            findByEntity: findByEntity,\n            getPrevVersion: getPrevVersion\n        };\n\n        return service;\n\n        function findAllAudited() {\n            return $http.get('api/audits/entity/all').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function findByEntity(entityType, limit) {\n            return $http.get('api/audits/entity/changes', {\n                params: {\n                    entityType: entityType,\n                    limit: limit\n                }\n            }).then(function (response) {\n                return response.data;\n            });\n        }\n\n        function getPrevVersion(qualifiedName, entityId, commitVersion) {\n            return $http.get('api/audits/entity/changes/version/previous', {\n                params: {\n                    qualifiedName: qualifiedName,\n                    entityId: entityId,\n                    commitVersion: commitVersion\n                }\n            }).then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('AuditDetailModalCtrl', AuditDetailModalCtrl);\n\n    AuditDetailModalCtrl.$inject = ['$scope', '$uibModalInstance', 'ObjectDiff', 'diff', 'audit'];\n\n    function AuditDetailModalCtrl($scope, $uibModalInstance, ObjectDiff, diff, audit) {\n        var vm = this;\n        \n        vm.diffValue = ObjectDiff.toJsonView(diff);\n        vm.diffValueChanges = ObjectDiff.toJsonDiffView(diff);\n        vm.audit = audit;\n        vm.cancel = cancel;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    };\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('EntityAuditController', EntityAuditController);\n\n    EntityAuditController.$inject = ['$scope', '$filter', '$uibModal', 'EntityAuditService', 'AlertService', 'ObjectDiff'];\n\n    function EntityAuditController ($scope, $filter, $uibModal, EntityAuditService, AlertService, ObjectDiff) {\n        var vm = this;\n\n        vm.entities = [];\n        vm.audits = [];\n        vm.limits = [25, 50, 100, 200];\n        vm.limit = 25;\n        vm.loading = false;\n        vm.loadChanges = loadChanges;\n        vm.findAllAudited = findAllAudited;\n        vm.getEntityName = getEntityName;\n        vm.format = format;\n        vm.isObject = isObject;\n        vm.isDate = isDate;\n        vm.openChange = openChange;\n\n        vm.findAllAudited();\n\n        function findAllAudited() {\n            EntityAuditService.findAllAudited().then(function (data) {\n                vm.entities = data;\n            });\n        }\n\n        function loadChanges() {\n            vm.loading = true;\n            var entityType = vm.qualifiedName;\n            EntityAuditService.findByEntity(entityType, vm.limit).then(function (data) {\n                vm.audits = data.map(function(it){\n                    it.entityValue = JSON.parse(it.entityValue);\n                    return it;\n                });\n                vm.loading = false;\n            }, function(){\n                vm.loading = false;\n            });\n        };\n\n        function getEntityName(qualifiedName) {\n            if (qualifiedName) {\n                var splits = qualifiedName.split(\".\");\n                return splits[splits.length - 1];\n            }\n            else return null;\n        };\n\n        function format(val){\n            if(val)\n                return ObjectDiff.objToJsonView(val);\n            else return '';\n        };\n\n        function isObject(val){\n            return (val && (typeof val) == 'object');\n        };\n\n        function isDate(key){\n            return (key && key.indexOf(\"Date\") != -1);\n        };\n\n        function openChange(audit){\n\n            if(audit.commitVersion < 2){\n                AlertService.warning(\"There is no previous version available for this entry.\\nThis is the first\" +\n                    \" audit entry captured for this object\");\n            } else {\n                EntityAuditService.getPrevVersion(audit.entityType, audit.entityId, audit.commitVersion).then(function (data) {\n                    var previousVersion = JSON.parse(data.entityValue),\n                        currentVersion = audit.entityValue;\n                    // enable below to have the dates formatted\n                    //previousVersion = convertDates(previousVersion);\n                    //currentVersion = convertDates(currentVersion);\n                    var diff = ObjectDiff.diffOwnProperties(previousVersion, currentVersion);\n\n                    $uibModal.open({\n                        templateUrl: 'app/admin/entity-audit/entity-audit.detail.html',\n                        controller: 'AuditDetailModalCtrl',\n                        controllerAs: 'vm',\n                        size: 'lg',\n                        resolve: {\n                            diff: function () {\n                                return diff;\n                            },\n                            audit: function () {\n                                return audit;\n                            }\n                        }\n                    });\n                });\n            }\n        };\n\n        function convertDates(obj) {\n            for(var key in obj) {\n                if (obj.hasOwnProperty(key) && obj[key]) {\n                    if (key.indexOf(\"Date\") != -1 && (obj[key] instanceof Date || Object.prototype.toString.call(obj[key]) === '[object Date]' || (new Date(obj[key]) !== \"Invalid Date\" && !isNaN(new Date(obj[key]))))) {\n                        obj[key] = $filter('date')(obj[key]);\n                    }\n                }\n            }\n            return obj;\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'API'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/jhipster/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n;\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penality (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penality (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx = 0;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;(function(){angular.module(\"manateeApp\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/home/home.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-2\\\"></div><div class=\\\"col-md-8\\\"><h1>Welcome!</h1><p class=\\\"lead\\\">Thanks for using Manatee Traffic Control application.</p><div ng-switch=\\\"vm.isAuthenticated()\\\"><div class=\\\"alert alert-success\\\" ng-switch-when=\\\"true\\\">You are logged in as user \\\"{{vm.account.login}}\\\".</div><div class=\\\"alert alert-warning\\\" ng-switch-when=\\\"false\\\">If you want to <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")<br>- User (login=\\\"user\\\" and password=\\\"user\\\").</div><div class=\\\"alert alert-warning\\\" ng-switch-when=\\\"false\\\">You don\\'t have an account yet? <a class=\\\"alert-link\\\" ui-sref=\\\"register\\\">Register a new account</a></div></div></div></div></div>\");\n$templateCache.put(\"app/account/activate/activate.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1>Activation</h1><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\"><strong>Your user has been activated.</strong> Please <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>\");\n$templateCache.put(\"app/account/password/password.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h2>Password for [<b>{{vm.account.login}}</b>]</h2><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\"><strong>Password changed!</strong></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\">The password and its confirmation do not match!</div><form name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.changePassword()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"New password\\\" ng-model=\\\"vm.password\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\">Your password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"Confirm the new password\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\">Your confirmation password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\">Your confirmation password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\">Save</button></form></div></div></div>\");\n$templateCache.put(\"app/account/register/register.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1>Registration</h1><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\"><strong>Registration failed!</strong> Please try again later.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorUserExists\\\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorEmailExists\\\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\">The password and its confirmation do not match!</div></div><div class=\\\"col-md-8 col-md-offset-2\\\"><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.register()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"login\\\">Username</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"login\\\" name=\\\"login\\\" placeholder=\\\"Your username\\\" ng-model=\\\"vm.registerAccount.login\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" ng-pattern=\\\"/^[_\\'.@A-Za-z0-9-]*$/\\\" required><div ng-show=\\\"form.login.$dirty && form.login.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.required\\\">Your username is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.minlength\\\">Your username is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.maxlength\\\">Your username cannot be longer than 50 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.pattern\\\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Your e-mail\\\" ng-model=\\\"vm.registerAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"New password\\\" ng-model=\\\"vm.registerAccount.password\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\">Your password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.registerAccount.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"Confirm the new password\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\">Your confirmation password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\">Your confirmation password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\">Register</button></form><p></p><div class=\\\"alert alert-warning\\\">If you want to <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")<br>- User (login=\\\"user\\\" and password=\\\"user\\\").</div></div></div></div>\");\n$templateCache.put(\"app/account/settings/settings.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h2>User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\"><strong>Settings saved!</strong></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorEmailExists\\\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\"><strong>An error has occurred!</strong> Settings could not be saved.</div><form name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"firstName\\\">First Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"firstName\\\" name=\\\"firstName\\\" placeholder=\\\"Your first name\\\" ng-model=\\\"vm.settingsAccount.firstName\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" required maxlength=\\\"50\\\"><div ng-show=\\\"form.firstName.$dirty && form.firstName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.required\\\">Your first name is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.minlength\\\">Your first name is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.maxlength\\\">Your first name cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"lastName\\\">Last Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastName\\\" name=\\\"lastName\\\" placeholder=\\\"Your last name\\\" ng-model=\\\"vm.settingsAccount.lastName\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" required maxlength=\\\"50\\\"><div ng-show=\\\"form.lastName.$dirty && form.lastName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.required\\\">Your last name is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.minlength\\\">Your last name is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.maxlength\\\">Your last name cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Your e-mail\\\" ng-model=\\\"vm.settingsAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required maxlength=\\\"100\\\"><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\">Save</button></form></div></div></div>\");\n$templateCache.put(\"app/account/sessions/sessions.html\",\"<div><h2>Active sessions for [<b>{{vm.account.login}}</b>]</h2><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\"><strong>Session invalidated!</strong></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\"><strong>An error has occured!</strong> The session could not be invalidated.</div><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th>IP Address</th><th>User agent</th><th>Date</th><th></th></tr></thead><tbody><tr ng-repeat=\\\"session in vm.sessions\\\"><td>{{session.ipAddress}}</td><td>{{session.userAgent}}</td><td>{{session.formattedTokenDate}}</td><td><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.invalidate(session.series)\\\">Invalidate</button></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/admin/audits/audits.html\",\"<div><h2>Audits</h2><div class=\\\"row\\\"><div class=\\\"col-md-5\\\"><h4>Filter by date</h4><p class=\\\"input-group\\\"><span class=\\\"input-group-addon\\\">from</span> <input type=\\\"date\\\" class=\\\"input-sm form-control\\\" name=\\\"start\\\" ng-model=\\\"vm.fromDate\\\" ng-change=\\\"vm.onChangeDate()\\\" required> <span class=\\\"input-group-addon\\\">to</span> <input type=\\\"date\\\" class=\\\"input-sm form-control\\\" name=\\\"end\\\" ng-model=\\\"vm.toDate\\\" ng-change=\\\"vm.onChangeDate()\\\" required></p></div></div><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\"><thead><tr><th ng-click=\\\"predicate = \\'timestamp\\'; reverse=!reverse\\\"><span>Date</span></th><th ng-click=\\\"predicate = \\'principal\\'; reverse=!reverse\\\"><span>User</span></th><th ng-click=\\\"predicate = \\'type\\'; reverse=!reverse\\\"><span>State</span></th><th ng-click=\\\"predicate = \\'data.message\\'; reverse=!reverse\\\"><span>Extra data</span></th></tr></thead><tr ng-repeat=\\\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\\\" ng-hide=\\\"audit.filtered\\\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\\\"audit.data.message\\\">{{audit.data.message}}</span> <span ng-show=\\\"audit.data.remoteAddress\\\"><span>Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\\\"text-center\\\"><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.loadPage(vm.page)\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/admin/configuration/configuration.html\",\"<div><h2>Configuration</h2><span>Filter (by prefix)</span> <input type=\\\"text\\\" ng-model=\\\"filter\\\" class=\\\"form-control\\\"><label ng-hide=\\\"filteredConfig.length == 0\\\">Spring configuration</label><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\" style=\\\"table-layout:fixed\\\" ng-hide=\\\"filteredConfig.length == 0\\\"><thead><tr><th ng-click=\\\"predicate = \\'prefix\\'; reverse=!reverse\\\" class=\\\"col-sm-4\\\"><span>Prefix</span></th><th class=\\\"col-sm-8\\\">Properties</th></tr></thead><tr ng-repeat=\\\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\\\"><td><span>{{entry.prefix}}</span></td><td><div class=\\\"row\\\" ng-repeat=\\\"(key, value) in entry.properties\\\"><div class=\\\"col-md-4\\\">{{key}}</div><div class=\\\"col-md-8\\\"><span class=\\\"pull-right label label-default break\\\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\\\"(key, value) in vm.allConfiguration\\\"><label ng-hide=\\\"filtered.length == 0\\\"><span>{{key}}</span></label><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\" style=\\\"table-layout:fixed\\\" ng-hide=\\\"filtered.length == 0\\\"><thead><tr><th class=\\\"col-sm-4\\\">Property</th><th class=\\\"col-sm-8\\\">Value</th></tr></thead><tbody><tr ng-repeat=\\\"item in filtered = (value | filter:filter)\\\"><td class=\\\"break\\\">{{item.key}}</td><td class=\\\"break\\\"><span class=\\\"pull-right label label-default break\\\">{{item.val}}</span></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/admin/entity-audit/entity-audit.detail.html\",\"<div class=\\\"modal-header\\\"><button aria-label=\\\"Close\\\" data-dismiss=\\\"modal\\\" class=\\\"close\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\"><span aria-hidden=\\\"true\\\">&times;</span></button><h4 class=\\\"modal-title\\\">Audit Details</h4></div><div class=\\\"modal-body pad\\\"><div><strong>{{vm.audit.action}} action was performed on below data</strong><br><br><del class=\\\"diff diff-key\\\">Old/Removed value</del> &nbsp; <ins class=\\\"diff diff-key\\\">New/Added value</ins></div><br><label>Changed Fields</label><pre id=\\\"resultChanges\\\" ng-bind-html=\\\"vm.diffValueChanges\\\"></pre><label>All Fields</label><pre id=\\\"result\\\" ng-bind-html=\\\"vm.diffValue\\\"></pre></div><div class=\\\"modal-footer\\\"><button data-dismiss=\\\"modal\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\">Done</button></div>\");\n$templateCache.put(\"app/admin/entity-audit/entity-audits.html\",\"<div ng-cloak class=\\\"pad\\\"><div class=\\\"row\\\"><h3 class=\\\"col-sm-12\\\">Entity Audits</h3></div><jhi-alert></jhi-alert><div class=\\\"row\\\"><div class=\\\"col-md-12 pad\\\"><h4>Filter</h4><form name=\\\"auditForm\\\" role=\\\"form\\\" novalidate show-validation><div class=\\\"row\\\"><div class=\\\"col-md-8 form-group\\\"><label>Entity/Table</label><select class=\\\"input-sm form-control\\\" name=\\\"qualifiedName\\\" id=\\\"qualifiedName\\\" required ng-options=\\\"vm.getEntityName(entity) for entity in vm.entities\\\" ng-model=\\\"vm.qualifiedName\\\"></select><div ng-show=\\\"auditForm.qualifiedName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"auditForm.qualifiedName.$error.required\\\">This field is required</p></div></div><div class=\\\"col-md-4 form-group\\\"><label>Limit to</label><select class=\\\"input-sm form-control\\\" name=\\\"limit\\\" id=\\\"limit\\\" required ng-options=\\\"option for option in vm.limits\\\" ng-model=\\\"vm.limit\\\"></select></div></div><div class=\\\"row pad\\\"><button ng-disabled=\\\"auditForm.$invalid\\\" class=\\\"btn btn-primary pull-right\\\" ng-click=\\\"vm.loadChanges()\\\"><i class=\\\"glyphicon glyphicon-import\\\"></i>&nbsp;Load Change List</button></div></form></div></div><div ng-show=\\\"!vm.loading\\\"><div class=\\\"table-responsive\\\" ng-if=\\\"vm.audits.length > 0\\\"><p ng-if=\\\"vm.qualifiedName\\\">Last <strong>{{vm.limit}}</strong> Changes for <strong>{{vm.getEntityName(vm.qualifiedName)}}</strong></p><form class=\\\"form-inline\\\"><div class=\\\"form-group\\\"><label for=\\\"searchField\\\">Filter:</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"searchField\\\" ng-model=\\\"filter.$\\\" placeholder=\\\"global filter\\\"></div><div class=\\\"form-group\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"searchFieldEntityId\\\" ng-model=\\\"filter.entityId\\\" placeholder=\\\"entity id filter\\\"></div></form><table class=\\\"table table-bordered table-hover table-striped\\\"><thead><tr><th>Entity Id</th><th>Action</th><th>Version</th><th>Value</th><th>Modified Date</th><th>Modified By</th><th><i class=\\\"glyphicon glyphicon-eye-open\\\"></i></th></tr></thead><tbody><tr ng-repeat=\\\"audit in vm.audits | filter:filter\\\"><td>{{audit.entityId}}</td><td>{{audit.action}}</td><td>{{audit.commitVersion}}</td><td><pre class=\\\"audit-obj\\\" ng-bind-html=\\\"vm.format(audit.entityValue)\\\"></pre></td><!-- comment above line and uncomment below to have Table view of value --><!--td class=\\\"no-pad\\\">\\n                        <div class=\\\"audit-obj\\\">\\n                            <table class=\\\"table table-bordered table-hover no-margin\\\">\\n                                <tr>\\n                                    <th>Field</th>\\n                                    <th>Value</th>\\n                                </tr>\\n                                <tr ng-repeat=\\\"(k,v) in audit.entityValue\\\" ng-if=\\\"!vm.isObject(v)\\\">\\n                                    <td>{{k}}</td>\\n                                    <td>\\n                                        <span ng-if=\\\"vm.isDate(k)\\\">{{v | date:\\'medium\\'}}</span>\\n                                        <span ng-if=\\\"!vm.isDate(k)\\\">{{v}}</span>\\n                                    </td>\\n                                </tr>\\n                            </table>\\n                        </div>\\n                    </td--><td>{{audit.modifiedDate | date:\\'medium\\'}}</td><td>{{audit.modifiedBy}}</td><td><button type=\\\"button\\\" ng-click=\\\"vm.openChange(audit)\\\" uib-tooltip=\\\"View Audit Change Details\\\" uib-tooltip-placement=\\\"auto\\\" class=\\\"btn btn-info btn-xs\\\"><i class=\\\"glyphicon glyphicon-eye-open\\\"></i></button></td></tr></tbody></table></div><p ng-if=\\\"vm.displayedChanges.length == 0\\\">No Data found for the filters</p></div></div>\");\n$templateCache.put(\"app/admin/health/health.html\",\"<div><h2>Health Checks</h2><p><button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.refresh()\\\"><span class=\\\"glyphicon glyphicon-refresh\\\"></span>&nbsp;<span>Refresh</span></button></p><table id=\\\"healthCheck\\\" class=\\\"table table-striped\\\"><thead><tr><th class=\\\"col-md-7\\\">Service Name</th><th class=\\\"col-md-2 text-center\\\">Status</th><th class=\\\"col-md-2 text-center\\\">Details</th></tr></thead><tbody><tr ng-repeat=\\\"health in vm.healthData\\\"><td><span class=\\\"text-capitalize\\\">{{ vm.baseName(health.name) }}</span> {{vm.subSystemName(health.name)}}</td><td class=\\\"text-center\\\"><span class=\\\"label\\\" ng-class=\\\"vm.getLabelClass(health.status)\\\">{{ health.status }}</span></td><td class=\\\"text-center\\\"><a class=\\\"hand\\\" ng-click=\\\"vm.showHealth(health)\\\" ng-show=\\\"health.details || health.error\\\"><i class=\\\"glyphicon glyphicon-eye-open\\\"></i></a></td></tr></tbody></table></div>\");\n$templateCache.put(\"app/admin/health/health.modal.html\",\"<div class=\\\"modal-header\\\"><button aria-label=\\\"Close\\\" data-dismiss=\\\"modal\\\" class=\\\"close\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\"><span aria-hidden=\\\"true\\\">&times;</span></button><h4 class=\\\"modal-title\\\" id=\\\"showHealthLabel\\\"><span class=\\\"text-capitalize\\\">{{ vm.baseName(vm.currentHealth.name) }}</span> {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\\\"modal-body pad\\\"><div ng-show=\\\"vm.currentHealth.details\\\"><h4>Properties</h4><table class=\\\"table table-striped\\\"><thead><tr><th class=\\\"col-md-6 text-left\\\">Name</th><th class=\\\"col-md-6 text-left\\\">Value</th></tr></thead><tbody><tr ng-repeat=\\\"(k,v) in vm.currentHealth.details\\\"><td class=\\\"col-md-6 text-left\\\">{{k}}</td><td class=\\\"col-md-6 text-left\\\">{{v}}</td></tr></tbody></table></div><div ng-show=\\\"vm.currentHealth.error\\\"><h4>Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\\\"modal-footer\\\"><button data-dismiss=\\\"modal\\\" class=\\\"btn btn-default pull-left\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\">Done</button></div>\");\n$templateCache.put(\"app/admin/logs/logs.html\",\"<div class=\\\"table-responsive\\\"><h2>Logs</h2><p>There are {{ vm.loggers.length }} loggers.</p><span>Filter</span> <input type=\\\"text\\\" ng-model=\\\"filter\\\" class=\\\"form-control\\\"><table class=\\\"table table-condensed table-striped table-bordered\\\"><thead><tr title=\\\"click to order\\\"><th ng-click=\\\"predicate = \\'name\\'; reverse=!reverse\\\"><span>Name</span></th><th ng-click=\\\"predicate = \\'level\\'; reverse=!reverse\\\"><span>Level</span></th></tr></thead><tr ng-repeat=\\\"logger in vm.loggers | filter:filter | orderBy:predicate:reverse\\\"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click=\\\"vm.changeLevel(logger.name, \\'TRACE\\')\\\" ng-class=\\\"(logger.level==\\'TRACE\\') ? \\'btn-danger\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">TRACE</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'DEBUG\\')\\\" ng-class=\\\"(logger.level==\\'DEBUG\\') ? \\'btn-warning\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">DEBUG</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'INFO\\')\\\" ng-class=\\\"(logger.level==\\'INFO\\') ? \\'btn-info\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">INFO</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'WARN\\')\\\" ng-class=\\\"(logger.level==\\'WARN\\') ? \\'btn-success\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">WARN</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'ERROR\\')\\\" ng-class=\\\"(logger.level==\\'ERROR\\') ? \\'btn-primary\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">ERROR</button></td></tr></table></div>\");\n$templateCache.put(\"app/admin/docs/docs.html\",\"<iframe src=\\\"swagger-ui/index.html\\\" frameborder=\\\"0\\\" marginheight=\\\"0\\\" marginwidth=\\\"0\\\" width=\\\"100%\\\" height=\\\"900\\\" scrolling=\\\"auto\\\" target=\\\"_top\\\"></iframe>\");\n$templateCache.put(\"app/admin/metrics/metrics.html\",\"<div><h2>Application Metrics</h2><p><button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.refresh()\\\"><span class=\\\"glyphicon glyphicon-refresh\\\"></span>&nbsp;<span>Refresh</span></button></p><h3>JVM Metrics</h3><div class=\\\"row\\\" ng-hide=\\\"vm.updatingMetrics\\\"><div class=\\\"col-md-4\\\"><b>Memory</b><p><span>Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\\\"col-md-4\\\"><b>Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\\\"hand\\\" ng-click=\\\"vm.refreshThreadDumpData()\\\" data-toggle=\\\"modal\\\" data-target=\\\"#threadDump\\\"><i class=\\\"glyphicon glyphicon-eye-open\\\"></i></a><p><span>Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"warning\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"warning\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\\\"col-md-4\\\"><b>Garbage collections</b><div class=\\\"row\\\"><div class=\\\"col-md-9\\\">Mark Sweep count</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\">Mark Sweep time</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\">Scavenge count</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\">Scavenge time</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\\\"well well-lg\\\" ng-show=\\\"vm.updatingMetrics\\\">Updating...</div><h3>HTTP requests (events per second)</h3><p><span>Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span>Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th>Code</th><th>Count</th><th class=\\\"text-right\\\">Mean</th><th class=\\\"text-right\\\"><span>Average</span> (1 min)</th><th class=\\\"text-right\\\"><span>Average</span> (5 min)</th><th class=\\\"text-right\\\"><span>Average</span> (15 min)</th></tr></thead><tbody><tr><td>OK</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td>Not Found</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td>Server error</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3>Services statistics (time in millisecond)</h3><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th>Service name</th><th class=\\\"text-right\\\">Count</th><th class=\\\"text-right\\\">Mean</th><th class=\\\"text-right\\\">Min</th><th class=\\\"text-right\\\">p50</th><th class=\\\"text-right\\\">p75</th><th class=\\\"text-right\\\">p95</th><th class=\\\"text-right\\\">p99</th><th class=\\\"text-right\\\">Max</th></tr></thead><tbody><tr ng-repeat=\\\"(k, v) in vm.servicesStats\\\"><td>{{k}}</td><td class=\\\"text-right\\\">{{v.count}}</td><td class=\\\"text-right\\\">{{v.mean * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.min * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p50 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p75 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p95 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p99 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3>Ehcache statistics</h3><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th>Cache name</th><th class=\\\"text-right\\\">Objects</th><th class=\\\"text-right\\\">Hits</th><th class=\\\"text-right\\\">Misses</th><th class=\\\"text-right\\\">Eviction count</th><th class=\\\"text-right\\\">Mean get time (ms)</th></tr></thead><tbody><tr ng-repeat=\\\"(k, v) in vm.cachesStats\\\" ng-once><td>{{v.name}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.objects\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.hits\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.misses\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.eviction-count\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.mean-get-time\\'].value | number:2}}</td></tr></tbody></table></div><h3 ng-show=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value > 0\\\">DataSource statistics (time in millisecond)</h3><div class=\\\"table-responsive\\\" ng-show=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value > 0\\\"><table class=\\\"table table-striped\\\"><thead><tr><th><span>Usage</span> ({{vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value}})</th><th class=\\\"text-right\\\">Count</th><th class=\\\"text-right\\\">Mean</th><th class=\\\"text-right\\\">Min</th><th class=\\\"text-right\\\">p50</th><th class=\\\"text-right\\\">p75</th><th class=\\\"text-right\\\">p95</th><th class=\\\"text-right\\\">p99</th><th class=\\\"text-right\\\">Max</th></tr></thead><tbody><tr><td><div class=\\\"progress progress-striped\\\"><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value\\\" value=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].count}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].mean | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].min | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p50 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p75 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p95 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p99 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/admin/metrics/metrics.modal.html\",\"<!-- Modal used to display the threads dump --><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"vm.cancel()\\\">&times;</button><h4 class=\\\"modal-title\\\">Threads dump</h4></div><div class=\\\"modal-body pad\\\"><span class=\\\"label label-primary\\\" ng-click=\\\"threadDumpFilter = {}\\\">All&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\\\"label label-success\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\\\">Runnable&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\\\"label label-info\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'WAITING\\'}\\\">Waiting&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\\\"label label-warning\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\\\">Timed Waiting&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\\\"label label-danger\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\\\">Blocked&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\\\"voffset2\\\">&nbsp;</div>Filter <input type=\\\"text\\\" ng-model=\\\"threadDumpFilter\\\" class=\\\"form-control\\\"><div class=\\\"row pad\\\" ng-repeat=\\\"(k, v) in vm.threadDump | filter:threadDumpFilter\\\"><h5><span class=\\\"label\\\" ng-class=\\\"vm.getLabelClass(v.threadState)\\\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\\\"show = !show\\\"><span ng-show=\\\"!show\\\">Show StackTrace</span> <span ng-show=\\\"show\\\">Hide StackTrace</span></a></h5><div class=\\\"well\\\" ng-show=\\\"show\\\"><div ng-repeat=\\\"(stK, stV) in v.stackTrace\\\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\\\"voffset1\\\"></span></div></div><table class=\\\"table table-condensed\\\"><thead><tr><th class=\\\"text-right\\\">Blocked Time</th><th class=\\\"text-right\\\">Blocked Count</th><th class=\\\"text-right\\\">Waited Time</th><th class=\\\"text-right\\\">Waited Count</th><th>Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default pull-left\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.cancel()\\\">Done</button></div>\");\n$templateCache.put(\"app/admin/user-management/user-management-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.user.login)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this User?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span>Delete</span></button></div></form>\");\n$templateCache.put(\"app/admin/user-management/user-management-detail.html\",\"<div><h2><span>User</span> \\\"{{vm.user.login}}\\\"</h2><dl class=\\\"dl-horizontal\\\"><dt><span>Login</span></dt><dd><span>{{vm.user.login}}</span></dd><dt><span>First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span>Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span>Email</span></dt><dd>{{vm.user.email}}</dd><dt><span>Activated</span></dt><dd>{{vm.user.activated}}</dd><dt><span>Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span>Created Date</span></dt><dd>{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span>Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span>Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span>Profiles</span></dt><dd><ul class=\\\"list-unstyled\\\"><li ng-repeat=\\\"authority in vm.user.authorities\\\"><span>{{authority}}</span></li></ul></dd></dl><button type=\\\"submit\\\" ui-sref=\\\"user-management\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span> Back</span></button></div>\");\n$templateCache.put(\"app/admin/user-management/user-management-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myUserLabel\\\">Create or edit a User</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label>ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"id\\\" ng-model=\\\"vm.user.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\">Login</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"login\\\" ng-model=\\\"vm.user.login\\\" ng-required=\\\"vm.user.id == null\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.login.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.login.$error.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.login.$error.maxlength\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\">First Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstName\\\" ng-model=\\\"vm.user.firstName\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.firstName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.firstName.$error.maxlength\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label>Last Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastName\\\" ng-model=\\\"vm.user.lastName\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.lastName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.lastName.$error.maxlength\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\">Email</label><input type=\\\"email\\\" class=\\\"form-control\\\" name=\\\"email\\\" ng-model=\\\"vm.user.email\\\" required ng-maxlength=\\\"100\\\"><div ng-show=\\\"editForm.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.maxlength\\\">This field cannot be longer than 100 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.email\\\">Your e-mail is invalid.</p></div></div><div class=\\\"form-group\\\"><label for=\\\"activated\\\"><input ng-disabled=\\\"vm.user.id === null\\\" type=\\\"checkbox\\\" id=\\\"activated\\\" ng-model=\\\"vm.user.activated\\\"> <span>Activated</span></label></div><div class=\\\"form-group\\\"><label>Profiles</label><select class=\\\"form-control\\\" multiple=\\\"multiple\\\" name=\\\"authority\\\" ng-model=\\\"vm.user.authorities\\\" ng-options=\\\"authority for authority in vm.authorities\\\"></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span>Save</span></button></div></form>\");\n$templateCache.put(\"app/admin/user-management/user-management.html\",\"<div><h2>Users</h2><jhi-alert></jhi-alert><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"user-management.new\\\"><span class=\\\"glyphicon glyphicon-flash\\\"></span> <span>Create a new User</span></button></div></div><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th>ID</th><th>Login</th><th>Email</th><th></th><th>Profiles</th><th>Created Date</th><th>Last Modified By</th><th>Last Modified Date</th><th></th></tr></thead><tbody><tr ng-repeat=\\\"user in vm.users track by user.id\\\"><td><a ui-sref=\\\"user-management-detail({login:user.login})\\\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><span class=\\\"label label-danger\\\" ng-click=\\\"vm.setActive(user, true)\\\" ng-show=\\\"!user.activated\\\" style=\\\"cursor: pointer\\\">Desactivated</span> <span class=\\\"label label-success\\\" ng-click=\\\"vm.setActive(user, false)\\\" ng-show=\\\"user.activated\\\" style=\\\"cursor: pointer\\\">Activated</span></td><td><div ng-repeat=\\\"authority in user.authorities\\\"><span class=\\\"label label-info\\\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"user-management-detail({login:user.login})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"user-management.edit({login:user.login})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"user-management.delete({login:user.login})\\\" class=\\\"btn btn-danger btn-sm\\\" ng-disabled=\\\"vm.currentAccount.login==user.login\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.loadAll()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/entities/patient/patient-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.patient.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Patient?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span>Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/patient/patient-detail.html\",\"<div><h2><span>Patient</span> {{vm.patient.id}}</h2><hr><dl class=\\\"dl-horizontal jh-entity-details\\\"><dt><span>Name</span></dt><dd><span>{{vm.patient.name}}</span></dd><dt><span>Medical Referral Id</span></dt><dd><span>{{vm.patient.medicalReferralId}}</span></dd><dt><span>Age</span></dt><dd><span>{{vm.patient.age}}</span></dd><dt><span>Condition Desciption</span></dt><dd><span>{{vm.patient.conditionDesciption}}</span></dd><dt><span>Priority</span></dt><dd><span>{{vm.patient.priority}}</span></dd><dt><span>Deadline</span></dt><dd><span>{{vm.patient.deadline | date:\\'medium\\'}}</span></dd><dt><span>Referral Source</span></dt><dd><a ui-sref=\\\"referral-source-detail({id:vm.patient.referralSource.id})\\\">{{vm.patient.referralSource.id}}</a></dd></dl><br><h4><span>History</span></h4><div><table class=\\\"history-table\\\" style=\\\"width: 100%; border-collapse: collapse\\\"><thead class=\\\"\\\"><tr><th style=\\\"width: 2%\\\">Team ID</th><th style=\\\"width: 2%\\\">Team Name</th><th style=\\\"width: 2%\\\">Potential Discharged</th><th style=\\\"width: 2%\\\">Action</th><th style=\\\"width: 2%\\\">Last Modified Date</th><th style=\\\"width: 2%\\\">Last Modified By</th></tr></thead><tbody class=\\\"\\\" id=\\\"\\\"><tr ng-repeat=\\\"patientHistory in patientHistories\\\" id=\\\"potentialdischarge-tr\\\"><td style=\\\"width: 2%\\\">{{patientHistory.teamId}}</td><td style=\\\"width: 2%\\\">{{patientHistory.teamName}}</td><td style=\\\"width: 2%\\\">{{patientHistory.potentialDischarged}}</td><td style=\\\"width: 2%\\\">{{patientHistory.action}}</td><td style=\\\"width: 2%\\\">{{patientHistory.lastModifiedDate}}</td><td style=\\\"width: 2%\\\">{{patientHistory.lastModifiedBy}}</td></tr></tbody></table></div><br><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span> Back</span></button></div>\");\n$templateCache.put(\"app/entities/patient/patient-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myPatientLabel\\\">Create or edit a Patient</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\" ng-show=\\\"vm.patient.id\\\"><label for=\\\"id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.patient.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_name\\\">Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" id=\\\"field_name\\\" ng-model=\\\"vm.patient.name\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_medicalReferralId\\\">Medical Referral Id</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"medicalReferralId\\\" id=\\\"field_medicalReferralId\\\" ng-model=\\\"vm.patient.medicalReferralId\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_age\\\">Age</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"age\\\" id=\\\"field_age\\\" ng-model=\\\"vm.patient.age\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_conditionDesciption\\\">Condition Desciption</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"conditionDesciption\\\" id=\\\"field_conditionDesciption\\\" ng-model=\\\"vm.patient.conditionDesciption\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_priority\\\">Priority</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"priority\\\" id=\\\"field_priority\\\" ng-model=\\\"vm.patient.priority\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_deadline\\\">Deadline</label><div class=\\\"input-group\\\"><input id=\\\"field_deadline\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"deadline\\\" datetime-picker=\\\"{{dateformat}}\\\" ng-model=\\\"vm.patient.deadline\\\" is-open=\\\"vm.datePickerOpenStatus.deadline\\\"> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'deadline\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div></div><div class=\\\"form-group\\\"><label for=\\\"field_referralSource\\\">Referral Source</label><select class=\\\"form-control\\\" id=\\\"field_referralSource\\\" name=\\\"referralSource\\\" ng-model=\\\"vm.patient.referralSource\\\" ng-options=\\\"referralSource as referralSource.id for referralSource in vm.referralsources track by referralSource.id\\\"><option value=\\\"\\\"></option></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span>Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/patient/patients.html\",\"<div><h2>Patients</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"patient.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span>Create new Patient</span></button></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr><th><span>ID</span></th><th><span>Name</span></th><th><span>Medical Referral Id</span></th><th><span>Age</span></th><th><span>Condition Desciption</span></th><th><span>Priority</span></th><th><span>Deadline</span></th><th><span>Referral Source</span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"patient in vm.patients track by patient.id\\\"><td><a ui-sref=\\\"patient-detail({id:patient.id})\\\">{{patient.id}}</a></td><td>{{patient.name}}</td><td>{{patient.medicalReferralId}}</td><td>{{patient.age}}</td><td>{{patient.conditionDesciption}}</td><td>{{patient.priority}}</td><td>{{patient.deadline | date:\\'medium\\'}}</td><td><a ui-sref=\\\"referral-source-detail({id:patient.referralSource.id})\\\">{{patient.referralSource.id}}</a></td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"patient-detail({id:patient.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"patient.edit({id:patient.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"patient.delete({id:patient.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button></div></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/entities/queue/queue-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.queue.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Queue?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span>Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/queue/queue-detail.html\",\"<div><h2><span>Queue</span> {{vm.queue.id}}</h2><hr><dl class=\\\"dl-horizontal jh-entity-details\\\"><dt><span>Status</span></dt><dd><span>{{vm.queue.status}}</span></dd><dt><span>Timestamp Initial</span></dt><dd><span>{{vm.queue.timestampInitial | date:\\'medium\\'}}</span></dd><dt><span>Timestamp Final</span></dt><dd><span>{{vm.queue.timestampFinal | date:\\'medium\\'}}</span></dd><dt><span>Patient</span></dt><dd><a ui-sref=\\\"patient-detail({id:vm.queue.patient.id})\\\">{{vm.queue.patient.id}}</a></dd><dt><span>Team</span></dt><dd><a ui-sref=\\\"team-detail({id:vm.queue.team.id})\\\">{{vm.queue.team.id}}</a></dd></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span> Back</span></button></div>\");\n$templateCache.put(\"app/entities/queue/queue-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myQueueLabel\\\">Create or edit a Queue</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\" ng-show=\\\"vm.queue.id\\\"><label for=\\\"id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.queue.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_status\\\">Status</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"status\\\" id=\\\"field_status\\\" ng-model=\\\"vm.queue.status\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_timestampInitial\\\">Timestamp Initial</label><div class=\\\"input-group\\\"><input id=\\\"field_timestampInitial\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"timestampInitial\\\" datetime-picker=\\\"{{dateformat}}\\\" ng-model=\\\"vm.queue.timestampInitial\\\" is-open=\\\"vm.datePickerOpenStatus.timestampInitial\\\"> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'timestampInitial\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_timestampFinal\\\">Timestamp Final</label><div class=\\\"input-group\\\"><input id=\\\"field_timestampFinal\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"timestampFinal\\\" datetime-picker=\\\"{{dateformat}}\\\" ng-model=\\\"vm.queue.timestampFinal\\\" is-open=\\\"vm.datePickerOpenStatus.timestampFinal\\\"> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'timestampFinal\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div></div><div class=\\\"form-group\\\"><label for=\\\"field_patient\\\">Patient</label><select class=\\\"form-control\\\" id=\\\"field_patient\\\" name=\\\"patient\\\" ng-model=\\\"vm.queue.patient\\\" ng-options=\\\"patient as patient.id for patient in vm.patients track by patient.id\\\"><option value=\\\"\\\"></option></select></div><div class=\\\"form-group\\\"><label for=\\\"field_team\\\">Team</label><select class=\\\"form-control\\\" id=\\\"field_team\\\" name=\\\"team\\\" ng-model=\\\"vm.queue.team\\\" ng-options=\\\"team as team.id for team in vm.teams track by team.id\\\"><option value=\\\"\\\"></option></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span>Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/queue/queue-patient-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myPatientLabel\\\">Create or edit a Patient</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"field_team\\\">Assign a Team</label><select class=\\\"form-control\\\" id=\\\"field_team\\\" name=\\\"team\\\" ng-model=\\\"vm.queue.team\\\" ng-options=\\\"team as team.id for team in vm.teams track by team.id\\\"><option value=\\\"\\\"></option></select></div><hr><div class=\\\"form-group\\\" ng-show=\\\"vm.patient.id\\\"><label for=\\\"id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.patient.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_name\\\">Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" id=\\\"field_name\\\" ng-model=\\\"vm.patient.name\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_medicalReferralId\\\">Medical Referral Id</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"medicalReferralId\\\" id=\\\"field_medicalReferralId\\\" ng-model=\\\"vm.patient.medicalReferralId\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_age\\\">Age</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"age\\\" id=\\\"field_age\\\" ng-model=\\\"vm.patient.age\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_conditionDesciption\\\">Condition Desciption</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"conditionDesciption\\\" id=\\\"field_conditionDesciption\\\" ng-model=\\\"vm.patient.conditionDesciption\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_priority\\\">Priority</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"priority\\\" id=\\\"field_priority\\\" ng-model=\\\"vm.patient.priority\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_deadline\\\">Deadline</label><div class=\\\"input-group\\\"><input id=\\\"field_deadline\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"deadline\\\" datetime-picker=\\\"{{dateformat}}\\\" ng-model=\\\"vm.patient.deadline\\\" is-open=\\\"vm.datePickerOpenStatus.deadline\\\"> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'deadline\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div></div><div class=\\\"form-group\\\"><label for=\\\"field_referralSource\\\">Referral Source</label><select class=\\\"form-control\\\" id=\\\"field_referralSource\\\" name=\\\"referralSource\\\" ng-model=\\\"vm.patient.referralSource\\\" ng-options=\\\"referralSource as referralSource.id for referralSource in vm.referralsources track by referralSource.id\\\"><option value=\\\"\\\"></option></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span>Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/queue/queues.html\",\"<script src=\\\"content/js/progressbar.min.js\\\"></script><script src=\\\"content/js/custom-progressbar.js\\\"></script><div id=\\\"QueueController\\\" ng-controller=\\\"QueueController\\\"></div><div class=\\\"content-header\\\"><div class=\\\"title\\\">Queues</div><div class=\\\"control-button\\\"><button class=\\\"navigation-btn\\\" ui-sref=\\\"queue.new\\\" style=\\\"float:left\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span>Import Patient</span></button> <button class=\\\"navigation-btn\\\" ui-sref=\\\"queue.newpatient\\\" style=\\\"float:left\\\"><span class=\\\"glyphicon glyphicon-user\\\"></span> <span>Create Patient</span></button></div></div><div class=\\\"content-content-wrapper\\\"><div id=\\\"content-sidebar\\\"><div id=\\\"content-sidebar-title\\\">LIST OF QUEUES</div><ui class=\\\"sidebar-connectedSortable\\\"><li ng-repeat=\\\"team in teams\\\"><div class=\\\"my-progress-bar\\\" id=\\\"{{team.progressbarid}}\\\"></div><div class=\\\"queue-title\\\"><p>{{team.name}}</p></div>{{activateProgressBar(team.progressbarid, team.occupation, team.progressbarText)}}</li></ui><div id=\\\"content-sidebar-title\\\">POTENTIAL DISCHARGED PATIENTS</div><table class=\\\"\\\" style=\\\"width: 100%; border-collapse: collapse\\\"><thead class=\\\"dischargedQueueTable-head\\\"><tr><th style=\\\"width: 2%\\\">Recover</th><th style=\\\"width: 10%\\\">MRID</th><th style=\\\"width: 10%\\\">Name</th><th style=\\\"width: 2%\\\">Delete</th></tr></thead><tbody class=\\\"connectedSortable dischargedQueueTable\\\" id=\\\"potentialdischarge\\\"><tr ng-repeat=\\\"potentialDischargedPatient in arrayPotentialDischargedPatient\\\" id=\\\"potentialdischarge-tr\\\"><td style=\\\"width: 2%\\\"><button type=\\\"submit\\\" ng-click=\\\"recoverFromPotentialDischarge(potentialDischargedPatient.id)\\\"><span class=\\\"glyphicon glyphicon-circle-arrow-left\\\"></span></button></td><td style=\\\"width: 10%\\\">{{potentialDischargedPatient.patient.medicalReferralId}}</td><td style=\\\"width: 10%\\\">{{potentialDischargedPatient.patient.name}}</td><td style=\\\"width: 2%\\\"><button type=\\\"submit\\\" ng-click=\\\"removeFromPotentialDischarge(potentialDischargedPatient.id)\\\"><span class=\\\"glyphicon glyphicon-log-in\\\"></span></button></td></tr></tbody></table><!-- <ui class=\\\"sidebar-connectedSortable connectedSortable\\\" id=\\\"potentialdischarge\\\">\\n            <li ng-repeat=\\\"potentialDischargedPatient in arrayPotentialDischargedPatient\\\">\\n                abc\\n            </li>\\n        </ui> --></div><div id=\\\"content-main\\\"><div class=\\\"container\\\"><div class=\\\"row\\\"><div class=\\\"col-sm-4 queue\\\" ng-repeat=\\\"patientTeam in arrayPatientTeam\\\" ng-init=\\\"$last && activateJQueryUI( )\\\"><div class=\\\"queue-content\\\"><p class=\\\"queue-title\\\">{{teams[arrayPatientTeam.indexOf(patientTeam)].name}}</p><table style=\\\"width: 100%; border-collapse: collapse\\\"><thead class=\\\"connectedSortable-head\\\" ng-switch on=\\\"teams[arrayPatientTeam.indexOf(patientTeam)].name\\\"><tr><th ng-switch-when=\\\"Outside hospital - request for transfer\\\" style=\\\"width: 10%\\\">Timer</th><th ng-switch-when=\\\"Outside hospital - in transit\\\" style=\\\"width: 10%\\\">Countdown</th><th style=\\\"width: 10%\\\">MRID</th><th style=\\\"width: 10%\\\">Name</th></tr></thead><tbody id=\\\"{{teams[arrayPatientTeam.indexOf(patientTeam)].id}}\\\" class=\\\"connectedSortable queueTable\\\"><tr ng-repeat=\\\"patientItem in patientTeam\\\" id=\\\"{{patientItem.id}}\\\" ng-switch on=\\\"teams[arrayPatientTeam.indexOf(patientTeam)].name\\\" ng-class=\\\"{0:\\'default\\', 1:\\'grayout\\'}[patientItem.status]\\\"><td ng-switch-when=\\\"Outside hospital - request for transfer\\\" style=\\\"width: 10%\\\"><timer start-time=\\\"patientItem.timestampSince\\\">{{ddays}}:{{hhours}}:{{mminutes}}:{{sseconds}}</timer></td><td ng-switch-when=\\\"Outside hospital - in transit\\\" style=\\\"width: 10%\\\"><div ng-show=\\\"patientItem.timestampDue <= 0\\\"></div><div ng-show=\\\"patientItem.timestampDue > 0\\\"><timer end-time=\\\"patientItem.timestampDue\\\">{{ddays}}:{{hhours}}:{{mminutes}}:{{sseconds}}</timer></div></td><td style=\\\"width: 10%\\\">{{patientItem.patient.medicalReferralId}}</td><td style=\\\"width: 10%\\\"><a ui-sref=\\\"queue.edit({id:patientItem.id})\\\">{{patientItem.patient.name}}</a></td></tr></tbody></table></div></div><script src=\\\"content/js/custom-queue.js\\\"></script></div></div></div></div><!-- \\n<div>\\n    <h2>Queues</h2>\\n    <jhi-alert></jhi-alert>\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-xs-4 no-padding-left\\\">\\n                <button class=\\\"btn btn-primary\\\" ui-sref=\\\"queue.new\\\" >\\n                    <span class=\\\"glyphicon glyphicon-plus\\\"></span>\\n                    <span >\\n                        Create new Queue\\n                    </span>\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <br/>\\n    <div class=\\\"table-responsive\\\">\\n        <table class=\\\"jh-table table table-striped\\\">\\n            <thead>\\n                <tr>\\n                    <th><span>ID</span></th>\\n                    <th><span>Status</span></th>\\n                    <th><span>Timestamp Initial</span></th>\\n                    <th><span>Timestamp Final</span></th>\\n                    <th><span>Patient</span></th>\\n                    <th><span>Team</span></th>\\n                    <th></th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr ng-repeat=\\\"queue in vm.queues track by queue.id\\\">\\n                    <td><a ui-sref=\\\"queue-detail({id:queue.id})\\\">{{queue.id}}</a></td>\\n                    <td>{{queue.status}}</td>\\n                    <td>{{queue.timestampInitial | date:\\'medium\\'}}</td>\\n                    <td>{{queue.timestampFinal | date:\\'medium\\'}}</td>\\n                    <td>\\n                        <a ui-sref=\\\"patient-detail({id:queue.patient.id})\\\">{{queue.patient.id}}</a>\\n                    </td>\\n                    <td>\\n                        <a ui-sref=\\\"team-detail({id:queue.team.id})\\\">{{queue.team.id}}</a>\\n                    </td>\\n                    <td class=\\\"text-right\\\">\\n                        <div class=\\\"btn-group flex-btn-group-container\\\">\\n                            <button type=\\\"submit\\\"\\n                                    ui-sref=\\\"queue-detail({id:queue.id})\\\"\\n                                    class=\\\"btn btn-info btn-sm\\\">\\n                                <span class=\\\"glyphicon glyphicon-eye-open\\\"></span>\\n                                <span class=\\\"hidden-xs hidden-sm\\\"></span>\\n                            </button>\\n                            <button type=\\\"submit\\\"\\n                                    ui-sref=\\\"queue.edit({id:queue.id})\\\"\\n                                    class=\\\"btn btn-primary btn-sm\\\">\\n                                <span class=\\\"glyphicon glyphicon-pencil\\\"></span>\\n                                <span class=\\\"hidden-xs hidden-sm\\\"></span>\\n                            </button>\\n                            <button type=\\\"submit\\\"\\n                                    ui-sref=\\\"queue.delete({id:queue.id})\\\"\\n                                    class=\\\"btn btn-danger btn-sm\\\">\\n                                <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>\\n                                <span class=\\\"hidden-xs hidden-sm\\\"></span>\\n                            </button>\\n                        </div>\\n                    </td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n</div>\\n -->\");\n$templateCache.put(\"app/entities/referral-source/referral-source-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.referralSource.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Referral Source?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span>Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/referral-source/referral-source-detail.html\",\"<div><h2><span>Referral Source</span> {{vm.referralSource.id}}</h2><hr><dl class=\\\"dl-horizontal jh-entity-details\\\"><dt><span>Name</span></dt><dd><span>{{vm.referralSource.name}}</span></dd><dt><span>Contact</span></dt><dd><span>{{vm.referralSource.contact}}</span></dd></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span> Back</span></button></div>\");\n$templateCache.put(\"app/entities/referral-source/referral-source-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myReferralSourceLabel\\\">Create or edit a Referral Source</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\" ng-show=\\\"vm.referralSource.id\\\"><label for=\\\"id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.referralSource.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_name\\\">Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" id=\\\"field_name\\\" ng-model=\\\"vm.referralSource.name\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_contact\\\">Contact</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"contact\\\" id=\\\"field_contact\\\" ng-model=\\\"vm.referralSource.contact\\\"></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span>Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/referral-source/referral-sources.html\",\"<div><h2>Referral Sources</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"referral-source.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span>Create new Referral Source</span></button></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr><th><span>ID</span></th><th><span>Name</span></th><th><span>Contact</span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"referralSource in vm.referralSources track by referralSource.id\\\"><td><a ui-sref=\\\"referral-source-detail({id:referralSource.id})\\\">{{referralSource.id}}</a></td><td>{{referralSource.name}}</td><td>{{referralSource.contact}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"referral-source-detail({id:referralSource.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"referral-source.edit({id:referralSource.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"referral-source.delete({id:referralSource.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button></div></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/entities/staff/staff-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.staff.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Staff?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span>Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/staff/staff-detail.html\",\"<div><h2><span>Staff</span> {{vm.staff.id}}</h2><hr><dl class=\\\"dl-horizontal jh-entity-details\\\"><dt><span>Name</span></dt><dd><span>{{vm.staff.name}}</span></dd><dt><span>Role</span></dt><dd><span>{{vm.staff.role}}</span></dd><dt><span>Team</span></dt><dd><a ui-sref=\\\"team-detail({id:vm.staff.team.id})\\\">{{vm.staff.team.id}}</a></dd></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span> Back</span></button></div>\");\n$templateCache.put(\"app/entities/staff/staff-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myStaffLabel\\\">Create or edit a Staff</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\" ng-show=\\\"vm.staff.id\\\"><label for=\\\"id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.staff.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_name\\\">Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" id=\\\"field_name\\\" ng-model=\\\"vm.staff.name\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_role\\\">Role</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"role\\\" id=\\\"field_role\\\" ng-model=\\\"vm.staff.role\\\"></div><div class=\\\"form-group\\\"><label for=\\\"field_team\\\">Team</label><select class=\\\"form-control\\\" id=\\\"field_team\\\" name=\\\"team\\\" ng-model=\\\"vm.staff.team\\\" ng-options=\\\"team as team.id for team in vm.teams track by team.id\\\"><option value=\\\"\\\"></option></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span>Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/staff/staff.html\",\"<div><h2>Staff</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"staff.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span>Create new Staff</span></button></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr><th><span>ID</span></th><th><span>Name</span></th><th><span>Role</span></th><th><span>Team</span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"staff in vm.staff track by staff.id\\\"><td><a ui-sref=\\\"staff-detail({id:staff.id})\\\">{{staff.id}}</a></td><td>{{staff.name}}</td><td>{{staff.role}}</td><td><a ui-sref=\\\"team-detail({id:staff.team.id})\\\">{{staff.team.id}}</a></td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"staff-detail({id:staff.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"staff.edit({id:staff.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"staff.delete({id:staff.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button></div></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/entities/team/team-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.team.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Team?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span>Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/team/team-detail.html\",\"<div><h2><span>Team</span> {{vm.team.id}}</h2><hr><dl class=\\\"dl-horizontal jh-entity-details\\\"><dt><span>Organization</span></dt><dd><span>{{vm.team.organization}}</span></dd><dt><span>Name</span></dt><dd><span>{{vm.team.name}}</span></dd><dt><span>Specialty</span></dt><dd><span>{{vm.team.specialty}}</span></dd><dt><span>Max Patients</span></dt><dd><span>{{vm.team.maxPatients}}</span></dd><dt><span>Monday</span></dt><dd><span>{{vm.team.monday}}</span></dd><dt><span>Tuesday</span></dt><dd><span>{{vm.team.tuesday}}</span></dd><dt><span>Wednesday</span></dt><dd><span>{{vm.team.wednesday}}</span></dd><dt><span>Thursday</span></dt><dd><span>{{vm.team.thursday}}</span></dd><dt><span>Friday</span></dt><dd><span>{{vm.team.friday}}</span></dd><dt><span>Saturday</span></dt><dd><span>{{vm.team.saturday}}</span></dd><dt><span>Sunday</span></dt><dd><span>{{vm.team.sunday}}</span></dd></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span> Back</span></button></div>\");\n$templateCache.put(\"app/entities/team/team-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myTeamLabel\\\">Create or edit a Team</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\" ng-show=\\\"vm.team.id\\\"><label for=\\\"id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.team.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_organization\\\">Organization</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"organization\\\" id=\\\"field_organization\\\" ng-model=\\\"vm.team.organization\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_name\\\">Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" id=\\\"field_name\\\" ng-model=\\\"vm.team.name\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_specialty\\\">Specialty</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"specialty\\\" id=\\\"field_specialty\\\" ng-model=\\\"vm.team.specialty\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_maxPatients\\\">Max Patients</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"maxPatients\\\" id=\\\"field_maxPatients\\\" ng-model=\\\"vm.team.maxPatients\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_custom\\\">Custom Max</label><div class=\\\"row\\\"><div class=\\\"col-sm-2\\\"><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"monday\\\" id=\\\"field_monday\\\" ng-model=\\\"vm.team.monday\\\" placeholder=\\\"Monday\\\"></div><div class=\\\"col-sm-2\\\"><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"tuesday\\\" id=\\\"field_tuesday\\\" ng-model=\\\"vm.team.tuesday\\\" placeholder=\\\"Tuesday\\\"></div><div class=\\\"col-sm-2\\\"><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"wednesday\\\" id=\\\"field_wednesday\\\" ng-model=\\\"vm.team.wednesday\\\" placeholder=\\\"Wednesday\\\"></div><div class=\\\"col-sm-2\\\"><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"thursday\\\" id=\\\"field_thursday\\\" ng-model=\\\"vm.team.thursday\\\" placeholder=\\\"Thursday\\\"></div><div class=\\\"col-sm-2\\\"><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"friday\\\" id=\\\"field_friday\\\" ng-model=\\\"vm.team.friday\\\" placeholder=\\\"Friday\\\"></div><div class=\\\"col-sm-2\\\"><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"saturday\\\" id=\\\"field_saturday\\\" ng-model=\\\"vm.team.saturday\\\" placeholder=\\\"Saturday\\\"></div><div class=\\\"col-sm-2\\\"><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"sunday\\\" id=\\\"field_sunday\\\" ng-model=\\\"vm.team.sunday\\\" placeholder=\\\"Sunday\\\"></div></div><!-- \\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"field_monday\\\">Monday</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"monday\\\" id=\\\"field_monday\\\"\\n                    ng-model=\\\"vm.team.monday\\\"\\n                     />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"field_tuesday\\\">Tuesday</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"tuesday\\\" id=\\\"field_tuesday\\\"\\n                    ng-model=\\\"vm.team.tuesday\\\"\\n                     />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"field_wednesday\\\">Wednesday</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"wednesday\\\" id=\\\"field_wednesday\\\"\\n                    ng-model=\\\"vm.team.wednesday\\\"\\n                     />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"field_thursday\\\">Thursday</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"thursday\\\" id=\\\"field_thursday\\\"\\n                    ng-model=\\\"vm.team.thursday\\\"\\n                     />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"field_friday\\\">Friday</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"friday\\\" id=\\\"field_friday\\\"\\n                    ng-model=\\\"vm.team.friday\\\"\\n                     />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"field_saturday\\\">Saturday</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"saturday\\\" id=\\\"field_saturday\\\"\\n                    ng-model=\\\"vm.team.saturday\\\"\\n                     />\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"field_sunday\\\">Sunday</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"sunday\\\" id=\\\"field_sunday\\\"\\n                    ng-model=\\\"vm.team.sunday\\\"\\n                     />\\n        </div> --></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span>Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span>Save</span></button></div></div></form>\");\n$templateCache.put(\"app/entities/team/teams.html\",\"<div><h2>Teams</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"team.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span>Create new Team</span></button></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr><th><span>ID</span></th><th><span>Organization</span></th><th><span>Name</span></th><th><span>Specialty</span></th><th><span>Max Patients</span></th><th><span>Monday</span></th><th><span>Tuesday</span></th><th><span>Wednesday</span></th><th><span>Thursday</span></th><th><span>Friday</span></th><th><span>Saturday</span></th><th><span>Sunday</span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"team in vm.teams track by team.id\\\"><td><a ui-sref=\\\"team-detail({id:team.id})\\\">{{team.id}}</a></td><td>{{team.organization}}</td><td>{{team.name}}</td><td>{{team.specialty}}</td><td>{{team.maxPatients}}</td><td>{{team.monday}}</td><td>{{team.tuesday}}</td><td>{{team.wednesday}}</td><td>{{team.thursday}}</td><td>{{team.friday}}</td><td>{{team.saturday}}</td><td>{{team.sunday}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"team-detail({id:team.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"team.edit({id:team.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"team.delete({id:team.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\"></span></button></div></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/components/login/login.html\",\"<div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.cancel()\\\">&times;</button><h4 class=\\\"modal-title\\\">Sign in</h4></div><div class=\\\"modal-body\\\"><div class=\\\"row\\\"><div class=\\\"col-md-4 col-md-offset-4\\\"><h1>Sign in</h1></div><div class=\\\"col-md-8 col-md-offset-2\\\"><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.authenticationError\\\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\\\"col-md-8 col-md-offset-2\\\"><form class=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"vm.login($event)\\\"><div class=\\\"form-group\\\"><label for=\\\"username\\\">Login</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"username\\\" placeholder=\\\"Your username\\\" ng-model=\\\"vm.username\\\"></div><div class=\\\"form-group\\\"><label for=\\\"password\\\">Password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" placeholder=\\\"Your password\\\" ng-model=\\\"vm.password\\\"></div><div class=\\\"form-group\\\"><label for=\\\"rememberMe\\\"><input type=\\\"checkbox\\\" id=\\\"rememberMe\\\" ng-model=\\\"vm.rememberMe\\\" checked=\\\"checked\\\"> <span>Remember me</span></label></div><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Sign in</button></form><p></p><div class=\\\"alert alert-warning\\\"><a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.requestResetPassword()\\\">Did you forget your password?</a></div><div class=\\\"alert alert-warning\\\">You don\\'t have an account yet? <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.register()\\\">Register a new account</a></div></div></div></div>\");\n$templateCache.put(\"app/layouts/error/accessdenied.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-2\\\"></div><div class=\\\"col-md-8\\\"><h1>Error Page!</h1><div class=\\\"alert alert-danger\\\">You are not authorized to access the page.</div></div></div></div>\");\n$templateCache.put(\"app/layouts/error/error.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-2\\\"><!-- <span class=\\\"hipster img-responsive img-rounded\\\"></span> --></div><div class=\\\"col-md-8\\\"><h1>Error Page!</h1><div ng-show=\\\"errorMessage\\\"><div class=\\\"alert alert-danger\\\">{{errorMessage}}</div></div></div></div></div>\");\n$templateCache.put(\"app/layouts/navbar/navbar.html\",\"<nav class=\\\"navbar navbar-default\\\" role=\\\"navigation\\\"><div class=\\\"container\\\"><div class=\\\"navbar-header\\\"><!-- <button type=\\\"button\\\" class=\\\"navbar-toggle\\\" ng-click=\\\"vm.toggleNavbar()\\\">\\n                <span class=\\\"sr-only\\\">Toggle navigation</span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n            </button> --> <a href=\\\"#/\\\"><img src=\\\"content/images/logo.jpg\\\" alt=\\\"Manatee\\\"></a></div><div class=\\\"navbar-collapse\\\" uib-collapse=\\\"vm.isNavbarCollapsed\\\" ng-switch=\\\"vm.isAuthenticated()\\\"><ul class=\\\"nav navbar-nav navbar-left\\\"><!-- <li ui-sref-active=\\\"active\\\">\\n                    <a ui-sref=\\\"home\\\" ng-click=\\\"vm.collapseNavbar()\\\">\\n                        \\n                        <span class=\\\"hidden-sm\\\">Home</span>\\n                    </a>\\n                </li> --><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"queue\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-asterisk\\\"></span>&nbsp; --> <span>Home</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\\\"{active: vm.$state.includes(\\'entity\\')}\\\" ng-switch-when=\\\"true\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"entity-menu\\\"><span><!-- <span class=\\\"glyphicon glyphicon-th-list\\\"></span> --> <span class=\\\"hidden-sm\\\">Entities </span><b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"team\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-asterisk\\\"></span>&nbsp; --> <span>Team</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"referral-source\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-asterisk\\\"></span>&nbsp; --> <span>Referral Source</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"patient\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-asterisk\\\"></span>&nbsp; --> <span>Patient</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"staff\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-asterisk\\\"></span>&nbsp; --> <span>Staff</span></a></li><!-- <li ui-sref-active=\\\"active\\\" >\\n                            <a ui-sref=\\\"queue\\\" ng-click=\\\"vm.collapseNavbar()\\\">\\n                                <span class=\\\"glyphicon glyphicon-asterisk\\\"></span>&nbsp;\\n                                <span >Queue</span>\\n                            </a>\\n                        </li> --><!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here --></ul></li></ul><ul class=\\\"nav navbar-nav navbar-right\\\"><li ng-class=\\\"{active: vm.$state.includes(\\'account\\')}\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"account-menu\\\"><span><!-- <span class=\\\"glyphicon glyphicon-user\\\"></span> --> <span class=\\\"hidden-sm\\\">Account </span><b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a ui-sref=\\\"settings\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-wrench\\\"></span>&nbsp; --> <span>Settings</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a ui-sref=\\\"password\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-lock\\\"></span> --> <span>Password</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a ui-sref=\\\"sessions\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-cloud\\\"></span>&nbsp; --> <span>Sessions</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a href=\\\"\\\" ng-click=\\\"vm.logout()\\\" id=\\\"logout\\\"><!-- <span class=\\\"glyphicon glyphicon-log-out\\\"></span>&nbsp; --> <span>Sign out</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"false\\\"><a href=\\\"\\\" ng-click=\\\"vm.login()\\\" id=\\\"login\\\"><!-- <span class=\\\"glyphicon glyphicon-log-in\\\"></span>&nbsp; --> <span>Sign in</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"false\\\"><a ui-sref=\\\"register\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-plus-sign\\\"></span>&nbsp; --> <span>Register</span></a></li></ul></li><li ng-class=\\\"{active: vm.$state.includes(\\'admin\\')}\\\" ng-switch-when=\\\"true\\\" has-authority=\\\"ROLE_ADMIN\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"admin-menu\\\"><span><!-- <span class=\\\"glyphicon glyphicon-tower\\\"></span> --> <span class=\\\"hidden-sm\\\">Administration</span> <b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"user-management\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-user\\\"></span>&nbsp; --> <span>User management</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-metrics\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-dashboard\\\"></span>&nbsp; --> <span>Metrics</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-health\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-heart\\\"></span>&nbsp; --> <span>Health</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-configuration\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-list-alt\\\"></span>&nbsp; --> <span>Configuration</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"audits\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-bell\\\"></span>&nbsp; --> <span>Audits</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"logs\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-tasks\\\"></span>&nbsp; --> <span>Logs</span></a></li><li ng-hide=\\\"vm.inProduction || vm.swaggerDisabled\\\" ui-sref-active=\\\"active\\\"><a ui-sref=\\\"docs\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-book\\\"></span>&nbsp; --> <span>API</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"entity-audit\\\" ng-click=\\\"vm.collapseNavbar()\\\"><!-- <span class=\\\"glyphicon glyphicon-list-alt\\\"></span>&nbsp; --> <span>Entity Audit</span></a></li><!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here --></ul></li></ul></div></div></nav>\");\n$templateCache.put(\"app/account/reset/finish/reset.finish.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-4 col-md-offset-4\\\"><h1>Reset password</h1><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.keyMissing\\\"><strong>The password reset key is missing.</strong></div><div class=\\\"alert alert-warning\\\" ng-hide=\\\"vm.success || vm.keyMissing\\\"><p>Choose a new password</p></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\"><p>Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\"><p><strong>Your password has been reset.</strong> Please <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>.</p></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\">The password and its confirmation do not match!</div><div ng-hide=\\\"vm.keyMissing\\\"><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.finishReset()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"New password\\\" ng-model=\\\"vm.resetAccount.password\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\">Your password is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.resetAccount.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"Confirm the new password\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"4\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\">Your password confirmation is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\">Your password confirmation is required to be at least 4 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\">Reset Password</button></form></div></div></div></div>\");\n$templateCache.put(\"app/account/reset/request/reset.request.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1>Reset your password</h1><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorEmailNotExists\\\"><strong>E-Mail address isn\\'t registered!</strong> Please check and try again.</div><div class=\\\"alert alert-warning\\\" ng-hide=\\\"vm.success\\\"><p>Enter the e-mail address you used to register.</p></div><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success == \\'OK\\'\\\"><p>Check your e-mails for details on how to reset your password.</p></div><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.requestReset()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Your e-mail\\\" ng-model=\\\"vm.resetAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\">Reset</button></form></div></div></div>\");}]);})();","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('hasAuthority', hasAuthority);\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' ];\n\n    function AuthServerProvider ($http, $localStorage ) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n\n            \n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n            \n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerDisabled = response.swaggerDisabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('activeLink', activeLink);\n\n    function activeLink() {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var clazz = attrs.activeLink;\n            var path = attrs.href;\n            path = path.substring(1); //hack because path does bot return including hashbang\n            scope.location = location;\n            scope.$watch('location.path()', function(newPath) {\n                if (path === newPath) {\n                    element.addClass(clazz);\n                } else {\n                    element.removeClass(clazz);\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                // 'content@': {\n                //     templateUrl: 'app/home/home.html',\n                //     controller: 'HomeController',\n                //     controllerAs: 'vm'\n                // }\n                'content@': {\n                    templateUrl: 'app/entities/queue/queues.html',\n                    controller: 'QueueController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('TeamDialogController', TeamDialogController);\n\n    TeamDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Team'];\n\n    function TeamDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Team) {\n        var vm = this;\n        vm.team = entity;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:teamUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.team.id !== null) {\n                Team.update(vm.team, onSaveSuccess, onSaveError);\n            } else {\n                Team.save(vm.team, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('TeamDetailController', TeamDetailController);\n\n    TeamDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Team'];\n\n    function TeamDetailController($scope, $rootScope, $stateParams, entity, Team) {\n        var vm = this;\n        vm.team = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:teamUpdate', function(event, result) {\n            vm.team = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('TeamDeleteController',TeamDeleteController);\n\n    TeamDeleteController.$inject = ['$uibModalInstance', 'entity', 'Team'];\n\n    function TeamDeleteController($uibModalInstance, entity, Team) {\n        var vm = this;\n        vm.team = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Team.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('team', {\n            parent: 'entity',\n            url: '/team',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Teams'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/team/teams.html',\n                    controller: 'TeamController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('team-detail', {\n            parent: 'entity',\n            url: '/team/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Team'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/team/team-detail.html',\n                    controller: 'TeamDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Team', function($stateParams, Team) {\n                    return Team.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('team.new', {\n            parent: 'team',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/team/team-dialog.html',\n                    controller: 'TeamDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                organization: null,\n                                name: null,\n                                specialty: null,\n                                maxPatients: null,\n                                monday: null,\n                                tuesday: null,\n                                wednesday: null,\n                                thursday: null,\n                                friday: null,\n                                saturday: null,\n                                sunday: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('team', null, { reload: true });\n                }, function() {\n                    $state.go('team');\n                });\n            }]\n        })\n        .state('team.edit', {\n            parent: 'team',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/team/team-dialog.html',\n                    controller: 'TeamDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Team', function(Team) {\n                            return Team.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('team', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('team.delete', {\n            parent: 'team',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/team/team-delete-dialog.html',\n                    controller: 'TeamDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Team', function(Team) {\n                            return Team.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('team', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('Team', Team);\n\n    Team.$inject = ['$resource'];\n\n    function Team ($resource) {\n        var resourceUrl =  'api/teams/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('TeamController', TeamController);\n\n    TeamController.$inject = ['$scope', '$state', 'Team'];\n\n    function TeamController ($scope, $state, Team) {\n        var vm = this;\n        vm.teams = [];\n        vm.loadAll = function() {\n            Team.query(function(result) {\n                vm.teams = result;\n            });\n        };\n\n        vm.loadAll();\n        \n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('StaffDialogController', StaffDialogController);\n\n    StaffDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Staff', 'Team'];\n\n    function StaffDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Staff, Team) {\n        var vm = this;\n        vm.staff = entity;\n        vm.teams = Team.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:staffUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.staff.id !== null) {\n                Staff.update(vm.staff, onSaveSuccess, onSaveError);\n            } else {\n                Staff.save(vm.staff, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('StaffDetailController', StaffDetailController);\n\n    StaffDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Staff', 'Team'];\n\n    function StaffDetailController($scope, $rootScope, $stateParams, entity, Staff, Team) {\n        var vm = this;\n        vm.staff = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:staffUpdate', function(event, result) {\n            vm.staff = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('StaffDeleteController',StaffDeleteController);\n\n    StaffDeleteController.$inject = ['$uibModalInstance', 'entity', 'Staff'];\n\n    function StaffDeleteController($uibModalInstance, entity, Staff) {\n        var vm = this;\n        vm.staff = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Staff.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('staff', {\n            parent: 'entity',\n            url: '/staff',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Staff'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/staff/staff.html',\n                    controller: 'StaffController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('staff-detail', {\n            parent: 'entity',\n            url: '/staff/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Staff'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/staff/staff-detail.html',\n                    controller: 'StaffDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Staff', function($stateParams, Staff) {\n                    return Staff.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('staff.new', {\n            parent: 'staff',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\n                    controller: 'StaffDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                role: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('staff', null, { reload: true });\n                }, function() {\n                    $state.go('staff');\n                });\n            }]\n        })\n        .state('staff.edit', {\n            parent: 'staff',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/staff/staff-dialog.html',\n                    controller: 'StaffDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Staff', function(Staff) {\n                            return Staff.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('staff', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('staff.delete', {\n            parent: 'staff',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/staff/staff-delete-dialog.html',\n                    controller: 'StaffDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Staff', function(Staff) {\n                            return Staff.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('staff', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('Staff', Staff);\n\n    Staff.$inject = ['$resource'];\n\n    function Staff ($resource) {\n        var resourceUrl =  'api/staff/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('StaffController', StaffController);\n\n    StaffController.$inject = ['$scope', '$state', 'Staff'];\n\n    function StaffController ($scope, $state, Staff) {\n        var vm = this;\n        vm.staff = [];\n        vm.loadAll = function() {\n            Staff.query(function(result) {\n                vm.staff = result;\n            });\n        };\n\n        vm.loadAll();\n        \n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ReferralSourceDialogController', ReferralSourceDialogController);\n\n    ReferralSourceDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'ReferralSource'];\n\n    function ReferralSourceDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, ReferralSource) {\n        var vm = this;\n        vm.referralSource = entity;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:referralSourceUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.referralSource.id !== null) {\n                ReferralSource.update(vm.referralSource, onSaveSuccess, onSaveError);\n            } else {\n                ReferralSource.save(vm.referralSource, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ReferralSourceDetailController', ReferralSourceDetailController);\n\n    ReferralSourceDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'ReferralSource'];\n\n    function ReferralSourceDetailController($scope, $rootScope, $stateParams, entity, ReferralSource) {\n        var vm = this;\n        vm.referralSource = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:referralSourceUpdate', function(event, result) {\n            vm.referralSource = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ReferralSourceDeleteController',ReferralSourceDeleteController);\n\n    ReferralSourceDeleteController.$inject = ['$uibModalInstance', 'entity', 'ReferralSource'];\n\n    function ReferralSourceDeleteController($uibModalInstance, entity, ReferralSource) {\n        var vm = this;\n        vm.referralSource = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            ReferralSource.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('referral-source', {\n            parent: 'entity',\n            url: '/referral-source',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'ReferralSources'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/referral-source/referral-sources.html',\n                    controller: 'ReferralSourceController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('referral-source-detail', {\n            parent: 'entity',\n            url: '/referral-source/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'ReferralSource'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/referral-source/referral-source-detail.html',\n                    controller: 'ReferralSourceDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'ReferralSource', function($stateParams, ReferralSource) {\n                    return ReferralSource.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('referral-source.new', {\n            parent: 'referral-source',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/referral-source/referral-source-dialog.html',\n                    controller: 'ReferralSourceDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                contact: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('referral-source', null, { reload: true });\n                }, function() {\n                    $state.go('referral-source');\n                });\n            }]\n        })\n        .state('referral-source.edit', {\n            parent: 'referral-source',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/referral-source/referral-source-dialog.html',\n                    controller: 'ReferralSourceDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['ReferralSource', function(ReferralSource) {\n                            return ReferralSource.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('referral-source', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('referral-source.delete', {\n            parent: 'referral-source',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/referral-source/referral-source-delete-dialog.html',\n                    controller: 'ReferralSourceDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['ReferralSource', function(ReferralSource) {\n                            return ReferralSource.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('referral-source', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('ReferralSource', ReferralSource);\n\n    ReferralSource.$inject = ['$resource'];\n\n    function ReferralSource ($resource) {\n        var resourceUrl =  'api/referral-sources/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ReferralSourceController', ReferralSourceController);\n\n    ReferralSourceController.$inject = ['$scope', '$state', 'ReferralSource'];\n\n    function ReferralSourceController ($scope, $state, ReferralSource) {\n        var vm = this;\n        vm.referralSources = [];\n        vm.loadAll = function() {\n            ReferralSource.query(function(result) {\n                vm.referralSources = result;\n            });\n        };\n\n        vm.loadAll();\n        \n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueuePatientDialogController', QueuePatientDialogController);\n\n    QueuePatientDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Patient', 'ReferralSource','Team','Queue'];\n\n    function QueuePatientDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Patient, ReferralSource,Team,Queue) {\n        var vm = this;\n        vm.teams = Team.query();\n        vm.queue = entity;\n        vm.patient = entity;\n        vm.referralsources = ReferralSource.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:patientUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        var onNewPatientSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:patientUpdate', result);\n\n            if (vm.patient.team !== null) {\n            \t\tvar newqueue = {};\n                \tnewqueue.team = vm.patient.team;\n                \tnewqueue.patient = result;\n                \tnewqueue.status=null;\n                \tnewqueue.timestampInitial=null;\n                \tnewqueue.timestampFinal=null;\n                \tnewqueue.id=null;\n                \tconsole.log(newqueue);\n                \tQueue.save(newqueue, onSaveSuccess, onSaveError);\n             }\n\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.patient.id !== null) {\n                Patient.update(vm.patient, onNewPatientSaveSuccess, onSaveError);\n            } else {\n            \t\tPatient.save(vm.patient, onNewPatientSaveSuccess, onSaveError);\t             \t\t\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.deadline = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueueDialogController', QueueDialogController);\n\n    QueueDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Queue', 'Patient', 'Team'];\n\n    function QueueDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Queue, Patient, Team) {\n        var vm = this;\n        vm.queue = entity;\n        vm.patients = Patient.query();\n        vm.teams = Team.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:queueUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.queue.id !== null) {\n                Queue.update(vm.queue, onSaveSuccess, onSaveError);\n            } else {\n                Queue.save(vm.queue, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.timestampInitial = false;\n        vm.datePickerOpenStatus.timestampFinal = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueueDetailController', QueueDetailController);\n\n    QueueDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Queue', 'Patient', 'Team'];\n\n    function QueueDetailController($scope, $rootScope, $stateParams, entity, Queue, Patient, Team) {\n        var vm = this;\n        vm.queue = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:queueUpdate', function(event, result) {\n            vm.queue = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueueDeleteController',QueueDeleteController);\n\n    QueueDeleteController.$inject = ['$uibModalInstance', 'entity', 'Queue'];\n\n    function QueueDeleteController($uibModalInstance, entity, Queue) {\n        var vm = this;\n        vm.queue = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Queue.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('queue', {\n            parent: 'entity',\n            url: '/queue',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Queues'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/queue/queues.html',\n                    controller: 'QueueController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('queue-detail', {\n            parent: 'entity',\n            url: '/queue/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Queue'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/queue/queue-detail.html',\n                    controller: 'QueueDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Queue', function($stateParams, Queue) {\n                    return Queue.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('queue.new', {\n            parent: 'queue',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/queue/queue-dialog.html',\n                    controller: 'QueueDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                status: null,\n                                timestampInitial: null,\n                                timestampFinal: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('queue', null, { reload: true });\n                }, function() {\n                    $state.go('queue');\n                });\n            }]\n        })\n        .state('queue.edit', {\n            parent: 'queue',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/queue/queue-dialog.html',\n                    controller: 'QueueDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Queue', function(Queue) {\n                            return Queue.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('queue', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('queue.delete', {\n            parent: 'queue',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/queue/queue-delete-dialog.html',\n                    controller: 'QueueDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Queue', function(Queue) {\n                            return Queue.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('queue', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('queue.newpatient', {\n            parent: 'queue',\n            url: '/newpatient',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/queue/queue-patient-dialog.html',\n                    controller: 'QueuePatientDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                medicalReferralId: null,\n                                age: null,\n                                conditionDesciption: null,\n                                priority: null,\n                                deadline: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    // $state.go('queue', null, { reload: true });\n                    $state.go('queue', null, { reload: true });\n                }, function() {\n                    $state.go('queue');\n                });\n            }]\n        })\n        ;\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('Queue', Queue);\n\n    Queue.$inject = ['$resource', 'DateUtils'];\n\n    function Queue ($resource, DateUtils) {\n        var resourceUrl =  'api/queues/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.timestampInitial = DateUtils.convertDateTimeFromServer(data.timestampInitial);\n                    data.timestampFinal = DateUtils.convertDateTimeFromServer(data.timestampFinal);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('QueueController', QueueController);\n\n    QueueController.$inject = ['$scope', '$state', 'Queue', 'ChatService', 'Team'];\n\n    function QueueController ($scope, $state, Queue, ChatService, Team) {\n        var vm = this;\n        $scope.queues = [];\n\n        function get_max_for_today(one_team) {\n            var weekdays = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];\n            var d = new Date();\n            var n = d.getDay();\n            if (one_team[weekdays[n]])\n                return one_team[weekdays[n]]\n            else\n                return one_team['maxPatients']\n        }\n\n        $scope.loadAll = function() {\n\n            var arrayTeam = [];\n            var arrayPatientTeam = [];\n            var arrayPotentialDischargedPatient = [];\n            Team.query(function(result) {\n                for (var i in result) {                    \n                    if(typeof result[i] ===\"object\")\n                        if ('name' in result[i]) {\n                            arrayTeam.push({'id':result[i]['id'], 'name': result[i]['name'], 'space': get_max_for_today(result[i]), 'progressbarid':'progressbar-'+result[i]['id'] });\n                            // arrayTeam.push({'id':result[i]['id'], 'name': result[i]['name'], 'space': result[i]['maxPatients'], 'progressbarid':'progressbar-'+result[i]['id'] });\n                            arrayPatientTeam.push([]);\n                            // console.log(result[i]['name']);\n                            // console.log(get_max_for_today(result[i]));\n                        }\n                }  \n                \n                Queue.query(function(result) {\n                    for (var i in result) {\n                        if(typeof result[i] ===\"object\")\n                            if ('team' in result[i]) \n                                if ('name' in result[i]['team']) {\n                                    for (var j in arrayTeam) {\n                                        if (arrayTeam[j]['name'] ==result[i]['team']['name']) {\n                                            var tmp = result[i];\n                                            // console.log(tmp);\n                                            // // check if name equals empty\n                                            // if(tmp['patient'] && tmp['patient']['name']=='') {\n                                            //     tmp['patient']['name']=' ';\n                                            // }\n                                            if (result[i]['timestampInitial']) {\n                                                var initialDate = result[i]['timestampInitial'];\n                                                tmp['timestampSince'] = new Date(initialDate).getTime();\n                                            }\n                                            if (result[i]['timestampFinal']) {\n                                                var finalDate = result[i]['timestampFinal'];\n                                                tmp['timestampDue'] = new Date(finalDate).getTime();\n                                            } else {\n                                                tmp['timestampDue'] = -1;\n                                            }\n                                            if (result[i]['status'] && result[i]['status']==\"potentialdischarge\") {\n                                                tmp['status'] = 1;\n                                                arrayPotentialDischargedPatient.push(tmp);\n                                            } else {\n                                                tmp['status'] = 0;\n                                            }\n                                            \n                                            arrayPatientTeam[j].push(tmp);\n                                        }\n                                    }\n                                }\n                    }\n                    for (var i in arrayTeam) {\n                        // console.log(arrayTeam[i]['space']);\n                        if (arrayTeam[i]['space']==null) {\n                            arrayTeam[i]['occupation'] = 0;\n                            arrayTeam[i]['progressbarText'] = arrayPatientTeam[i].length +\"\";\n                        } else if (arrayTeam[i]['space']<0) {\n                            arrayTeam[i]['occupation'] = 0;\n                            arrayTeam[i]['progressbarText'] = arrayPatientTeam[i].length +\"\";\n                        } else if (arrayTeam[i]['space']==0) {\n                            arrayTeam[i]['occupation'] = 0;\n                            arrayTeam[i]['progressbarText'] = arrayPatientTeam[i].length +\"/0\";\n                        } else {\n                            arrayTeam[i]['occupation'] = arrayPatientTeam[i].length/arrayTeam[i]['space'];\n                            arrayTeam[i]['progressbarText'] = arrayPatientTeam[i].length +\"/\"+arrayTeam[i]['space'];\n                        }\n                    }\n                    $scope.teams = arrayTeam;\n                    $scope.arrayPatientTeam = arrayPatientTeam;\n                    $scope.arrayPotentialDischargedPatient = arrayPotentialDischargedPatient;\n                    \n                });\n            });\n        };\n\n        $scope.loadAll();\n\n        $scope.addMessage = function(message) {\n            ChatService.send(\"send test message\");\n        };\n\n        ChatService.receive().then(null, null, function(message) {\n            // console.log(\"receive test message\");\n            // refresh_queue_page(false);\n            $scope.loadAll(function(result) {\n                $scope.activateProgressBar();\n            });\n        });\n\n        $scope.updateTeam = function(queueID, teamID) {\n            console.log(\"queueID, teamID:\"+ queueID+\"|\"+ teamID);\n            Queue.get({id: queueID}, function(queueResult) {\n                \n                Team.get({id : teamID}, function(teamResult) {\n                    // console.log(teamResult);\n                    queueResult.team=teamResult;\n                    queueResult.timestampInitial = new Date();\n                    // console.log(queueResult);\n                    Queue.update(queueResult, onSaveFinished);\n                });\n            });\n        }\n        $scope.updateStatus = function(queueID, status) {\n            Queue.get({id: queueID}, function(queueResult) {\n                queueResult.status=status;\n                Queue.update(queueResult, onSaveFinished);\n            });\n        }\n\n        var onSaveFinished = function () {\n            $scope.addMessage();\n        };\n\n        $scope.activateJQueryUI = function() {\n            activatejQueryUI();\n        }\n        $scope.activateProgressBar = function(barID, progressNum, progressText) {\n            intialProgressbar('#'+barID, progressNum, progressText);\n        }\n\n        $scope.recoverFromPotentialDischarge = function(queueID) {\n            Queue.get({id: queueID}, function(queueResult) {\n                queueResult.status='';\n                Queue.update(queueResult, onSaveFinished);\n            });\n        }\n        $scope.removeFromPotentialDischarge = function(queueID) {\n            console.log(queueID);\n            Queue.delete({id: queueID},\n                function () {\n                    $scope.addMessage();\n                });\n\n            // Queue.get({\n            //     id: queueID\n            // }, function(result) {\n            //     console.log(result);\n            //     $scope.queue = result;\n            //     $('#deleteQueueConfirmation').modal('show');\n            // });\n        };\n        $scope.delete = function(id) {\n            Queue.get({\n                id: id\n            }, function(result) {\n                $scope.queue = result;\n                $('#deleteQueueConfirmation').modal('show');\n            });\n        };\n        \n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PatientDialogController', PatientDialogController);\n\n    PatientDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Patient', 'ReferralSource'];\n\n    function PatientDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Patient, ReferralSource) {\n        var vm = this;\n        vm.patient = entity;\n        vm.referralsources = ReferralSource.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('manateeApp:patientUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.patient.id !== null) {\n                Patient.update(vm.patient, onSaveSuccess, onSaveError);\n            } else {\n                Patient.save(vm.patient, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.deadline = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PatientDetailController', PatientDetailController);\n\n    PatientDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Patient', 'ReferralSource', 'EntityAuditService'];\n\n    function PatientDetailController($scope, $rootScope, $stateParams, entity, Patient, ReferralSource, EntityAuditService) {\n        var vm = this;\n        vm.patient = entity;\n        \n        var unsubscribe = $rootScope.$on('manateeApp:patientUpdate', function(event, result) {\n            vm.patient = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n        $scope.loadPatientHistory = function() {\n            EntityAuditService.findByEntity(\"com.fangzhou.manatee.domain.Queue\", 9999).then(function (data) {\n                var audits = data.map(function(it){\n                    it.entityValue = JSON.parse(it.entityValue);\n                    return it;\n                });\n\n                var array_records = [];\n                for (var i in audits) {                \n                    if(typeof audits[i] ===\"object\")\n                        if ('id' in audits[i]) {\n                            var entityValue = audits[i]['entityValue'];\n                            if ('patient' in entityValue) {\n                                if(typeof entityValue['patient'] ===\"object\") {\n                                    var patient = entityValue['patient'];\n                                    var patient_id = patient[\n                                    'id']\n                                    if (patient_id==entity['id']) {\n                                        if('team' in entityValue) {\n                                            var team = entityValue['team'];\n                                            array_records.push({'teamId': team['id'], 'teamName': team['name'], 'lastModifiedDate': entityValue['lastModifiedDate'], 'lastModifiedBy': entityValue['lastModifiedBy'], 'action': audits[i]['action'], 'potentialDischarged': entityValue['status']});\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                }  \n                // console.log(\"vm.audits\");\n                // console.log(array_records);\n                // console.log(entity);\n                $scope.patientHistories = array_records;\n            }, function(){\n                // vm.loading = false;\n            });\n        }\n        $scope.loadPatientHistory();\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PatientDeleteController',PatientDeleteController);\n\n    PatientDeleteController.$inject = ['$uibModalInstance', 'entity', 'Patient'];\n\n    function PatientDeleteController($uibModalInstance, entity, Patient) {\n        var vm = this;\n        vm.patient = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Patient.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('patient', {\n            parent: 'entity',\n            url: '/patient',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Patients'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/patient/patients.html',\n                    controller: 'PatientController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('patient-detail', {\n            parent: 'entity',\n            url: '/patient/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Patient'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/patient/patient-detail.html',\n                    controller: 'PatientDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Patient', function($stateParams, Patient) {\n                    return Patient.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('patient.new', {\n            parent: 'patient',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/patient/patient-dialog.html',\n                    controller: 'PatientDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                medicalReferralId: null,\n                                age: null,\n                                conditionDesciption: null,\n                                priority: null,\n                                deadline: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('patient', null, { reload: true });\n                }, function() {\n                    $state.go('patient');\n                });\n            }]\n        })\n        .state('patient.edit', {\n            parent: 'patient',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/patient/patient-dialog.html',\n                    controller: 'PatientDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Patient', function(Patient) {\n                            return Patient.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('patient', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('patient.delete', {\n            parent: 'patient',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/patient/patient-delete-dialog.html',\n                    controller: 'PatientDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Patient', function(Patient) {\n                            return Patient.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('patient', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('manateeApp')\n        .factory('Patient', Patient);\n\n    Patient.$inject = ['$resource', 'DateUtils'];\n\n    function Patient ($resource, DateUtils) {\n        var resourceUrl =  'api/patients/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.deadline = DateUtils.convertDateTimeFromServer(data.deadline);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PatientController', PatientController);\n\n    PatientController.$inject = ['$scope', '$state', 'Patient'];\n\n    function PatientController ($scope, $state, Patient) {\n        var vm = this;\n        vm.patients = [];\n        vm.loadAll = function() {\n            Patient.query(function(result) {\n                vm.patients = result;\n            });\n        };\n\n        vm.loadAll();\n        \n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            \n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .filter('characters', characters);\n        \n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse (header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function (p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if( angular.isString(page) ) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n\n            return links;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page-1) * 20)==0 ? 1:(($ctrl.page-1) * 20)}} - ' +\n                    '{{($ctrl.page * 20) < $ctrl.queryCount ? ($ctrl.page * 20) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total'\n        }\n    };\n\n    angular\n        .module('manateeApp')\n        .component('jhiItemCount', jhiItemCount);\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n            }\n            return input.substring(0, 1).toUpperCase() + input.substring(1);\n        }\n    }\n})();\n","(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is succesful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        scope.$watch(function() {\n                            return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n    \n    angular\n        .module('manateeApp')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('manateeApp.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var errorHeader = httpResponse.headers('X-manateeApp-error');\n                var entityKey = httpResponse.headers('X-manateeApp-params');\n                if (errorHeader) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('manateeApp')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var alertKey = response.headers('X-manateeApp-alert');\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers('X-manateeApp-params')});\n            }\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('manateeApp.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    \n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$document'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $document) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            } else if (response.status === 403 && response.config.method !== 'GET' && getCSRF() === '') {\n                // If the CSRF token expired, then try to get a new CSRF token and retry the old request\n                var $http = $injector.get('$http');\n                return $http.get('/').finally(function() { return afterCSRFRenewed(response); });\n            }\n            return $q.reject(response);\n        }\n\n        function getCSRF() {\n            var doc = $document[0];\n            if (doc) {\n                var name = 'CSRF-TOKEN=';\n                var ca = doc.cookie.split(';');\n                for (var i = 0; i < ca.length; i++) {\n                    var c = ca[i];\n                    while (c.charAt(0) === ' ') {c = c.substring(1);}\n\n                    if (c.indexOf(name) !== -1) {\n                        return c.substring(name.length, c.length);\n                    }\n                }\n            }\n            return '';\n        }\n\n        function afterCSRFRenewed(oldResponse) {\n            if (getCSRF() !== '') {\n                // retry the old request after the new CSRF-TOKEN is obtained\n                var $http = $injector.get('$http');\n                return $http(oldResponse.config);\n            } else {\n                // unlikely get here but reject with the old response any way and avoid infinite loop\n                return $q.reject(oldResponse);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                \n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'manatee' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider'];\n\n    function localStorageConfig($localStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        \n        //enable CSRF\n        $httpProvider.defaults.xsrfCookieName = 'CSRF-TOKEN';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRF-TOKEN';\n        \n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n        \n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n","(function () {\n    \"use strict\";\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular.module(\"manateeApp\")\n\n.constant(\"VERSION\", \"0.0.1-SNAPSHOT\")\n\n.constant(\"DEBUG_INFO_ENABLED\", false)\n\n;\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'manatee'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'manatee'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.links = null;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.page = 1;\n        vm.setActive = setActive;\n        vm.totalItems = null;\n        vm.users = [];\n\n\n        vm.loadAll();\n\n        \n\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n\n        function loadAll () {\n            User.query({page: vm.page - 1, size: paginationConstants.itemsPerPage}, function (result, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n\n                //hide anonymous user from user management: it's a required user for Spring Security\n                for(var i in result) {\n                    if(result[i]['login'] === 'anonymoususer') {\n                        result.splice(i,1);\n                    }\n                }\n                vm.users = result;\n            });\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.loadAll();\n        }\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n            vm.editForm.$setPristine();\n            vm.editForm.$setUntouched();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/jhipster/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            vm.cachesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    index = newKey.lastIndexOf('.');\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(index + 1),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Logs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/jhipster/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var service = {\n            checkHealth: checkHealth\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('manateeApp')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.addHealthObject = addHealthObject;\n        vm.baseName = baseName;\n        vm.flattenHealthData = flattenHealthData;\n        vm.getLabelClass = getLabelClass;\n        vm.getModuleName = getModuleName;\n        vm.hasSubSystem = hasSubSystem;\n        vm.isHealthObject = isHealthObject;\n        vm.refresh = refresh;\n        vm.updatingHealth = true;\n        vm.separator = '.';\n        vm.showHealth = showHealth;\n        vm.subSystemName = subSystemName;\n        vm.transformHealthData = transformHealthData;\n\n        vm.refresh();\n\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!vm.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function baseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (vm.isHealthObject(value)) {\n                    if (vm.hasSubSystem(value)) {\n                        vm.addHealthObject(result, false, value, vm.getModuleName(path, key));\n                        vm.flattenHealthData(result, vm.getModuleName(path, key), value);\n                    } else {\n                        vm.addHealthObject(result, true, value, vm.getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + vm.separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = vm.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  vm.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n        function subSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            vm.flattenHealthData(response, null, data);\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity-audit', {\n            parent: 'admin',\n            url: '/entity-audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/entity-audit/entity-audits.html',\n                    controller: 'EntityAuditController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('EntityAuditService', EntityAuditService);\n\n    EntityAuditService.$inject = ['$http'];\n\n    function EntityAuditService ($http) {\n\n        var service = {\n            findAllAudited: findAllAudited,\n            findByEntity: findByEntity,\n            getPrevVersion: getPrevVersion\n        };\n\n        return service;\n\n        function findAllAudited() {\n            return $http.get('api/audits/entity/all').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function findByEntity(entityType, limit) {\n            return $http.get('api/audits/entity/changes', {\n                params: {\n                    entityType: entityType,\n                    limit: limit\n                }\n            }).then(function (response) {\n                return response.data;\n            });\n        }\n\n        function getPrevVersion(qualifiedName, entityId, commitVersion) {\n            return $http.get('api/audits/entity/changes/version/previous', {\n                params: {\n                    qualifiedName: qualifiedName,\n                    entityId: entityId,\n                    commitVersion: commitVersion\n                }\n            }).then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('AuditDetailModalCtrl', AuditDetailModalCtrl);\n\n    AuditDetailModalCtrl.$inject = ['$scope', '$uibModalInstance', 'ObjectDiff', 'diff', 'audit'];\n\n    function AuditDetailModalCtrl($scope, $uibModalInstance, ObjectDiff, diff, audit) {\n        var vm = this;\n        \n        vm.diffValue = ObjectDiff.toJsonView(diff);\n        vm.diffValueChanges = ObjectDiff.toJsonDiffView(diff);\n        vm.audit = audit;\n        vm.cancel = cancel;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    };\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('EntityAuditController', EntityAuditController);\n\n    EntityAuditController.$inject = ['$scope', '$filter', '$uibModal', 'EntityAuditService', 'AlertService', 'ObjectDiff'];\n\n    function EntityAuditController ($scope, $filter, $uibModal, EntityAuditService, AlertService, ObjectDiff) {\n        var vm = this;\n\n        vm.entities = [];\n        vm.audits = [];\n        vm.limits = [25, 50, 100, 200];\n        vm.limit = 25;\n        vm.loading = false;\n        vm.loadChanges = loadChanges;\n        vm.findAllAudited = findAllAudited;\n        vm.getEntityName = getEntityName;\n        vm.format = format;\n        vm.isObject = isObject;\n        vm.isDate = isDate;\n        vm.openChange = openChange;\n\n        vm.findAllAudited();\n\n        function findAllAudited() {\n            EntityAuditService.findAllAudited().then(function (data) {\n                vm.entities = data;\n            });\n        }\n\n        function loadChanges() {\n            vm.loading = true;\n            var entityType = vm.qualifiedName;\n            EntityAuditService.findByEntity(entityType, vm.limit).then(function (data) {\n                vm.audits = data.map(function(it){\n                    it.entityValue = JSON.parse(it.entityValue);\n                    return it;\n                });\n                vm.loading = false;\n            }, function(){\n                vm.loading = false;\n            });\n        };\n\n        function getEntityName(qualifiedName) {\n            if (qualifiedName) {\n                var splits = qualifiedName.split(\".\");\n                return splits[splits.length - 1];\n            }\n            else return null;\n        };\n\n        function format(val){\n            if(val)\n                return ObjectDiff.objToJsonView(val);\n            else return '';\n        };\n\n        function isObject(val){\n            return (val && (typeof val) == 'object');\n        };\n\n        function isDate(key){\n            return (key && key.indexOf(\"Date\") != -1);\n        };\n\n        function openChange(audit){\n\n            if(audit.commitVersion < 2){\n                AlertService.warning(\"There is no previous version available for this entry.\\nThis is the first\" +\n                    \" audit entry captured for this object\");\n            } else {\n                EntityAuditService.getPrevVersion(audit.entityType, audit.entityId, audit.commitVersion).then(function (data) {\n                    var previousVersion = JSON.parse(data.entityValue),\n                        currentVersion = audit.entityValue;\n                    // enable below to have the dates formatted\n                    //previousVersion = convertDates(previousVersion);\n                    //currentVersion = convertDates(currentVersion);\n                    var diff = ObjectDiff.diffOwnProperties(previousVersion, currentVersion);\n\n                    $uibModal.open({\n                        templateUrl: 'app/admin/entity-audit/entity-audit.detail.html',\n                        controller: 'AuditDetailModalCtrl',\n                        controllerAs: 'vm',\n                        size: 'lg',\n                        resolve: {\n                            diff: function () {\n                                return diff;\n                            },\n                            audit: function () {\n                                return audit;\n                            }\n                        }\n                    });\n                });\n            }\n        };\n\n        function convertDates(obj) {\n            for(var key in obj) {\n                if (obj.hasOwnProperty(key) && obj[key]) {\n                    if (key.indexOf(\"Date\") != -1 && (obj[key] instanceof Date || Object.prototype.toString.call(obj[key]) === '[object Date]' || (new Date(obj[key]) !== \"Invalid Date\" && !isNaN(new Date(obj[key]))))) {\n                        obj[key] = $filter('date')(obj[key]);\n                    }\n                }\n            }\n            return obj;\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'API'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/jhipster/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n","/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penality (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penality (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx = 0;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('manateeApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n"],"sourceRoot":"/source/"}